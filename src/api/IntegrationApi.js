/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Coupon from '../model/Coupon';
import CouponReservations from '../model/CouponReservations';
import CustomerInventory from '../model/CustomerInventory';
import CustomerProfileAudienceRequest from '../model/CustomerProfileAudienceRequest';
import CustomerProfileIntegrationRequestV2 from '../model/CustomerProfileIntegrationRequestV2';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse201 from '../model/InlineResponse201';
import IntegrationRequest from '../model/IntegrationRequest';
import IntegrationState from '../model/IntegrationState';
import IntegrationStateV2 from '../model/IntegrationStateV2';
import MultipleCustomerProfileIntegrationRequest from '../model/MultipleCustomerProfileIntegrationRequest';
import MultipleCustomerProfileIntegrationResponseV2 from '../model/MultipleCustomerProfileIntegrationResponseV2';
import NewCustomerProfile from '../model/NewCustomerProfile';
import NewCustomerSession from '../model/NewCustomerSession';
import NewEvent from '../model/NewEvent';
import NewReferral from '../model/NewReferral';
import NewReferralsForMultipleAdvocates from '../model/NewReferralsForMultipleAdvocates';
import Referral from '../model/Referral';

/**
* Integration service.
* @module api/IntegrationApi
* @version 10.0.0
*/
export default class IntegrationApi {

    /**
    * Constructs a new IntegrationApi. 
    * @alias module:api/IntegrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new coupon reservation
     * Creates a coupon reservation for all passed customer profiles on this couponID 
     * @param {String} couponValue The value of a coupon
     * @param {module:model/CouponReservations} couponReservations 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupon} and HTTP response
     */
    createCouponReservationWithHttpInfo(couponValue, couponReservations) {
      let postBody = couponReservations;
      // verify the required parameter 'couponValue' is set
      if (couponValue === undefined || couponValue === null) {
        throw new Error("Missing the required parameter 'couponValue' when calling createCouponReservation");
      }
      // verify the required parameter 'couponReservations' is set
      if (couponReservations === undefined || couponReservations === null) {
        throw new Error("Missing the required parameter 'couponReservations' when calling createCouponReservation");
      }

      let pathParams = {
        'couponValue': couponValue
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Coupon;
      return this.apiClient.callApi(
        '/v1/coupon_reservations/{couponValue}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new coupon reservation
     * Creates a coupon reservation for all passed customer profiles on this couponID 
     * @param {String} couponValue The value of a coupon
     * @param {module:model/CouponReservations} couponReservations 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupon}
     */
    createCouponReservation(couponValue, couponReservations) {
      return this.createCouponReservationWithHttpInfo(couponValue, couponReservations)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a referral code for an advocate
     * Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile. 
     * @param {module:model/NewReferral} newReferral 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Referral} and HTTP response
     */
    createReferralWithHttpInfo(newReferral) {
      let postBody = newReferral;
      // verify the required parameter 'newReferral' is set
      if (newReferral === undefined || newReferral === null) {
        throw new Error("Missing the required parameter 'newReferral' when calling createReferral");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Referral;
      return this.apiClient.callApi(
        '/v1/referrals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a referral code for an advocate
     * Creates a referral code for an advocate. The code will be valid for the referral campaign for which is created, indicated in the `campaignId` parameter, and will be associated with the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile. 
     * @param {module:model/NewReferral} newReferral 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Referral}
     */
    createReferral(newReferral) {
      return this.createReferralWithHttpInfo(newReferral)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create referral codes for multiple advocates
     * Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the `campaignId` parameter, and one referral code will be associated with one advocate using the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile. 
     * @param {module:model/NewReferralsForMultipleAdvocates} newReferralsForMultipleAdvocates 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] If set to `yes`, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse201} and HTTP response
     */
    createReferralsForMultipleAdvocatesWithHttpInfo(newReferralsForMultipleAdvocates, opts) {
      opts = opts || {};
      let postBody = newReferralsForMultipleAdvocates;
      // verify the required parameter 'newReferralsForMultipleAdvocates' is set
      if (newReferralsForMultipleAdvocates === undefined || newReferralsForMultipleAdvocates === null) {
        throw new Error("Missing the required parameter 'newReferralsForMultipleAdvocates' when calling createReferralsForMultipleAdvocates");
      }

      let pathParams = {
      };
      let queryParams = {
        'silent': opts['silent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/v1/referrals_for_multiple_advocates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create referral codes for multiple advocates
     * Creates unique referral codes for multiple advocates. The code will be valid for the referral campaign for which it is created, indicated in the `campaignId` parameter, and one referral code will be associated with one advocate using the profile specified in the `advocateProfileIntegrationId` parameter as the advocate's profile. 
     * @param {module:model/NewReferralsForMultipleAdvocates} newReferralsForMultipleAdvocates 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] If set to `yes`, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse201}
     */
    createReferralsForMultipleAdvocates(newReferralsForMultipleAdvocates, opts) {
      return this.createReferralsForMultipleAdvocatesWithHttpInfo(newReferralsForMultipleAdvocates, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete coupon reservations
     * Removes all passed customer profiles reservation from this coupon 
     * @param {String} couponValue The value of a coupon
     * @param {module:model/CouponReservations} couponReservations 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCouponReservationWithHttpInfo(couponValue, couponReservations) {
      let postBody = couponReservations;
      // verify the required parameter 'couponValue' is set
      if (couponValue === undefined || couponValue === null) {
        throw new Error("Missing the required parameter 'couponValue' when calling deleteCouponReservation");
      }
      // verify the required parameter 'couponReservations' is set
      if (couponReservations === undefined || couponReservations === null) {
        throw new Error("Missing the required parameter 'couponReservations' when calling deleteCouponReservation");
      }

      let pathParams = {
        'couponValue': couponValue
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/coupon_reservations/{couponValue}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete coupon reservations
     * Removes all passed customer profiles reservation from this coupon 
     * @param {String} couponValue The value of a coupon
     * @param {module:model/CouponReservations} couponReservations 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCouponReservation(couponValue, couponReservations) {
      return this.deleteCouponReservationWithHttpInfo(couponValue, couponReservations)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete the personal data of a customer
     * Delete all attributes on the customer profile and on entities that reference that customer profile. 
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCustomerDataWithHttpInfo(integrationId) {
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteCustomerData");
      }

      let pathParams = {
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/customer_data/{integrationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the personal data of a customer
     * Delete all attributes on the customer profile and on entities that reference that customer profile. 
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCustomerData(integrationId) {
      return this.deleteCustomerDataWithHttpInfo(integrationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an inventory of all data associated with a specific customer profile
     * Get information regarding entities referencing this customer profile's integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.profile] optional flag to decide if you would like customer profile information in the response
     * @param {Boolean=} [opts.referrals] optional flag to decide if you would like referral information in the response
     * @param {Boolean=} [opts.coupons] optional flag to decide if you would like coupon information in the response
     * @param {Boolean=} [opts.loyalty] optional flag to decide if you would like loyalty information in the response
     * @param {Boolean=} [opts.giveaways] optional flag to decide if you would like giveaways information in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerInventory} and HTTP response
     */
    getCustomerInventoryWithHttpInfo(integrationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getCustomerInventory");
      }

      let pathParams = {
        'integrationId': integrationId
      };
      let queryParams = {
        'profile': opts['profile'],
        'referrals': opts['referrals'],
        'coupons': opts['coupons'],
        'loyalty': opts['loyalty'],
        'giveaways': opts['giveaways']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerInventory;
      return this.apiClient.callApi(
        '/v1/customer_profiles/{integrationId}/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an inventory of all data associated with a specific customer profile
     * Get information regarding entities referencing this customer profile's integrationId. Currently we support customer profile information, referral codes and reserved coupons. In the future, this will be expanded with loyalty points.
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.profile] optional flag to decide if you would like customer profile information in the response
     * @param {Boolean=} [opts.referrals] optional flag to decide if you would like referral information in the response
     * @param {Boolean=} [opts.coupons] optional flag to decide if you would like coupon information in the response
     * @param {Boolean=} [opts.loyalty] optional flag to decide if you would like loyalty information in the response
     * @param {Boolean=} [opts.giveaways] optional flag to decide if you would like giveaways information in the response
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerInventory}
     */
    getCustomerInventory(integrationId, opts) {
      return this.getCustomerInventoryWithHttpInfo(integrationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the users that have this coupon reserved
     * Returns all users that have this coupon marked as reserved 
     * @param {String} couponValue The value of a coupon
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    getReservedCustomersWithHttpInfo(couponValue) {
      let postBody = null;
      // verify the required parameter 'couponValue' is set
      if (couponValue === undefined || couponValue === null) {
        throw new Error("Missing the required parameter 'couponValue' when calling getReservedCustomers");
      }

      let pathParams = {
        'couponValue': couponValue
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/v1/coupon_reservations/customerprofiles/{couponValue}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the users that have this coupon reserved
     * Returns all users that have this coupon marked as reserved 
     * @param {String} couponValue The value of a coupon
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    getReservedCustomers(couponValue) {
      return this.getReservedCustomersWithHttpInfo(couponValue)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Track an Event
     * Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The `sessionId` body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same `profileId` or an error will be returned.  As with customer sessions, you can use an empty string for `profileId` to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
     * @param {module:model/NewEvent} newEvent 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationState} and HTTP response
     */
    trackEventWithHttpInfo(newEvent, opts) {
      opts = opts || {};
      let postBody = newEvent;
      // verify the required parameter 'newEvent' is set
      if (newEvent === undefined || newEvent === null) {
        throw new Error("Missing the required parameter 'newEvent' when calling trackEvent");
      }

      let pathParams = {
      };
      let queryParams = {
        'dry': opts['dry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationState;
      return this.apiClient.callApi(
        '/v1/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Track an Event
     * Records an arbitrary event in a customer session. For example, an integration might record an event when a user updates their payment information.  The `sessionId` body parameter is required, an event is always part of a session. Much like updating a customer session, if either the profile or the session do not exist, a new empty one will be created. Note that if the specified session already exists, it must belong to the same `profileId` or an error will be returned.  As with customer sessions, you can use an empty string for `profileId` to indicate that this is an anonymous session.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place. 
     * @param {module:model/NewEvent} newEvent 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationState}
     */
    trackEvent(newEvent, opts) {
      return this.trackEventWithHttpInfo(newEvent, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Customer Profile V1
     * ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/Getting-Started/APIV2).  Update (or create) a [Customer Profile](https://developers.talon.one/Getting-Started/entities#/customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The `integrationId` may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the `integrationId`. It is vital that this ID **not** change over time, so **don't** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#/customer-profile [Rules]: /Getting-Started/entities#/campaigns-rulesets-and-coupons 
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @param {module:model/NewCustomerProfile} newCustomerProfile 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationState} and HTTP response
     */
    updateCustomerProfileWithHttpInfo(integrationId, newCustomerProfile, opts) {
      opts = opts || {};
      let postBody = newCustomerProfile;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateCustomerProfile");
      }
      // verify the required parameter 'newCustomerProfile' is set
      if (newCustomerProfile === undefined || newCustomerProfile === null) {
        throw new Error("Missing the required parameter 'newCustomerProfile' when calling updateCustomerProfile");
      }

      let pathParams = {
        'integrationId': integrationId
      };
      let queryParams = {
        'dry': opts['dry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationState;
      return this.apiClient.callApi(
        '/v1/customer_profiles/{integrationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Customer Profile V1
     * ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](/Getting-Started/APIV2).  Update (or create) a [Customer Profile](https://developers.talon.one/Getting-Started/entities#/customer-profile). This profile information can then be matched and/or updated by campaign [Rules][].  The `integrationId` may be any identifier that will remain stable for the customer. For example, you might use a database ID, an email, or a phone number as the `integrationId`. It is vital that this ID **not** change over time, so **don't** use any identifier that the customer can update themselves. E.g. if your application allows a customer to update their e-mail address, you should instead use a database ID.  Updating a customer profile will return a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  [Customer Profile]: /Getting-Started/entities#/customer-profile [Rules]: /Getting-Started/entities#/campaigns-rulesets-and-coupons 
     * @param {String} integrationId The custom identifier for this profile, must be unique within the account.
     * @param {module:model/NewCustomerProfile} newCustomerProfile 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationState}
     */
    updateCustomerProfile(integrationId, newCustomerProfile, opts) {
      return this.updateCustomerProfileWithHttpInfo(integrationId, newCustomerProfile, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Customer Profile Audiences
     * Update one ore multiple Customer Profiles with the specified Audiences 
     * @param {module:model/CustomerProfileAudienceRequest} customerProfileAudienceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateCustomerProfileAudiencesWithHttpInfo(customerProfileAudienceRequest) {
      let postBody = customerProfileAudienceRequest;
      // verify the required parameter 'customerProfileAudienceRequest' is set
      if (customerProfileAudienceRequest === undefined || customerProfileAudienceRequest === null) {
        throw new Error("Missing the required parameter 'customerProfileAudienceRequest' when calling updateCustomerProfileAudiences");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/customer_audiences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Customer Profile Audiences
     * Update one ore multiple Customer Profiles with the specified Audiences 
     * @param {module:model/CustomerProfileAudienceRequest} customerProfileAudienceRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateCustomerProfileAudiences(customerProfileAudienceRequest) {
      return this.updateCustomerProfileAudiencesWithHttpInfo(customerProfileAudienceRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Customer Profile
     * Update (or create) a [Customer Profile](https://developers.talon.one/Getting-Started/entities#/customer-profile).  The `integrationId` must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Updating a customer profile returns a response with the requested integration state. If `runRuleEngine` is set to `true`, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. - Any entity that was requested in the `responseContent` request parameter. 
     * @param {String} integrationId The custom identifier for this profile. Must be unique within the account.
     * @param {module:model/CustomerProfileIntegrationRequestV2} customerProfileIntegrationRequestV2 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.runRuleEngine] Indicates whether to run the rule engine. (default to false)
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`. Only used when `runRuleEngine` is set to `true`. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationStateV2} and HTTP response
     */
    updateCustomerProfileV2WithHttpInfo(integrationId, customerProfileIntegrationRequestV2, opts) {
      opts = opts || {};
      let postBody = customerProfileIntegrationRequestV2;
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateCustomerProfileV2");
      }
      // verify the required parameter 'customerProfileIntegrationRequestV2' is set
      if (customerProfileIntegrationRequestV2 === undefined || customerProfileIntegrationRequestV2 === null) {
        throw new Error("Missing the required parameter 'customerProfileIntegrationRequestV2' when calling updateCustomerProfileV2");
      }

      let pathParams = {
        'integrationId': integrationId
      };
      let queryParams = {
        'runRuleEngine': opts['runRuleEngine'],
        'dry': opts['dry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationStateV2;
      return this.apiClient.callApi(
        '/v2/customer_profiles/{integrationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Customer Profile
     * Update (or create) a [Customer Profile](https://developers.talon.one/Getting-Started/entities#/customer-profile).  The `integrationId` must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  Updating a customer profile returns a response with the requested integration state. If `runRuleEngine` is set to `true`, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. - Any entity that was requested in the `responseContent` request parameter. 
     * @param {String} integrationId The custom identifier for this profile. Must be unique within the account.
     * @param {module:model/CustomerProfileIntegrationRequestV2} customerProfileIntegrationRequestV2 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.runRuleEngine] Indicates whether to run the rule engine. (default to false)
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`. Only used when `runRuleEngine` is set to `true`. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationStateV2}
     */
    updateCustomerProfileV2(integrationId, customerProfileIntegrationRequestV2, opts) {
      return this.updateCustomerProfileV2WithHttpInfo(integrationId, customerProfileIntegrationRequestV2, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update multiple Customer Profiles
     * Update (or create) up to 1000 [Customer Profiles](https://developers.talon.one/Getting-Started/entities#/customer-profile) in 1 request.  The `integrationId` must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](https://developers.talon.one/Integration-API/API-Reference#updateCustomerSessionV2). 
     * @param {module:model/MultipleCustomerProfileIntegrationRequest} multipleCustomerProfileIntegrationRequest 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] If set to `yes`, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MultipleCustomerProfileIntegrationResponseV2} and HTTP response
     */
    updateCustomerProfilesV2WithHttpInfo(multipleCustomerProfileIntegrationRequest, opts) {
      opts = opts || {};
      let postBody = multipleCustomerProfileIntegrationRequest;
      // verify the required parameter 'multipleCustomerProfileIntegrationRequest' is set
      if (multipleCustomerProfileIntegrationRequest === undefined || multipleCustomerProfileIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'multipleCustomerProfileIntegrationRequest' when calling updateCustomerProfilesV2");
      }

      let pathParams = {
      };
      let queryParams = {
        'silent': opts['silent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MultipleCustomerProfileIntegrationResponseV2;
      return this.apiClient.callApi(
        '/v2/customer_profiles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update multiple Customer Profiles
     * Update (or create) up to 1000 [Customer Profiles](https://developers.talon.one/Getting-Started/entities#/customer-profile) in 1 request.  The `integrationId` must be any identifier that remains stable for the customer. Do not use an ID that the customer can update themselves. For example, you can use a database ID.  A customer profile [can be linked to one or more sessions](https://developers.talon.one/Integration-API/API-Reference#updateCustomerSessionV2). 
     * @param {module:model/MultipleCustomerProfileIntegrationRequest} multipleCustomerProfileIntegrationRequest 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] If set to `yes`, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MultipleCustomerProfileIntegrationResponseV2}
     */
    updateCustomerProfilesV2(multipleCustomerProfileIntegrationRequest, opts) {
      return this.updateCustomerProfilesV2WithHttpInfo(multipleCustomerProfileIntegrationRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Customer Session V1
     * ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](https://developers.talon.one/Getting-Started/APIV2).  Update (or create) a [Customer Session](https://developers.talon.one/Getting-Started/entities#/customer-session). For example, use this endpoint to represent which items are in the customer's cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user's cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID's.  To link a session to a customer profile, set the `profileId` parameter in the request body to a customer profile's `integrationId`. To track an anonymous session use the empty string (`\"\"`) as the `profileId`. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
     * @param {String} customerSessionId The custom identifier for this session, must be unique within the account.
     * @param {module:model/NewCustomerSession} newCustomerSession 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationState} and HTTP response
     */
    updateCustomerSessionWithHttpInfo(customerSessionId, newCustomerSession, opts) {
      opts = opts || {};
      let postBody = newCustomerSession;
      // verify the required parameter 'customerSessionId' is set
      if (customerSessionId === undefined || customerSessionId === null) {
        throw new Error("Missing the required parameter 'customerSessionId' when calling updateCustomerSession");
      }
      // verify the required parameter 'newCustomerSession' is set
      if (newCustomerSession === undefined || newCustomerSession === null) {
        throw new Error("Missing the required parameter 'newCustomerSession' when calling updateCustomerSession");
      }

      let pathParams = {
        'customerSessionId': customerSessionId
      };
      let queryParams = {
        'dry': opts['dry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationState;
      return this.apiClient.callApi(
        '/v1/customer_sessions/{customerSessionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Customer Session V1
     * ⚠️ Deprecation Notice: Support for requests to this endpoint will end on 15.07.2021. We will not remove the endpoint, and it will still be accessible for you to use. For new features support, migrate to [API V2.0](https://developers.talon.one/Getting-Started/APIV2).  Update (or create) a [Customer Session](https://developers.talon.one/Getting-Started/entities#/customer-session). For example, use this endpoint to represent which items are in the customer's cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user's cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID's.  To link a session to a customer profile, set the `profileId` parameter in the request body to a customer profile's `integrationId`. To track an anonymous session use the empty string (`\"\"`) as the `profileId`. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer profile returns a response with the full integration state. This includes the current state of the customer profile, the customer session, the event that was recorded, and an array of effects that took place.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
     * @param {String} customerSessionId The custom identifier for this session, must be unique within the account.
     * @param {module:model/NewCustomerSession} newCustomerSession 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationState}
     */
    updateCustomerSession(customerSessionId, newCustomerSession, opts) {
      return this.updateCustomerSessionWithHttpInfo(customerSessionId, newCustomerSession, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Customer Session
     * Update (or create) a [Customer Session](https://developers.talon.one/Getting-Started/entities#/customer-session). For example, use this endpoint to represent which items are in the customer's cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user's cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID's.  To link a session to a customer profile, set the `profileId` parameter in the request body to a customer profile's `integrationId`. To track an anonymous session use the empty string (`\"\"`) as the `profileId`. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer session returns a response with the requested integration state. If `runRuleEngine` is set to `true`, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. - Any entity that was requested in the `responseContent` request parameter.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
     * @param {String} customerSessionId The custom identifier for this session, must be unique within the account.
     * @param {module:model/IntegrationRequest} integrationRequest 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IntegrationStateV2} and HTTP response
     */
    updateCustomerSessionV2WithHttpInfo(customerSessionId, integrationRequest, opts) {
      opts = opts || {};
      let postBody = integrationRequest;
      // verify the required parameter 'customerSessionId' is set
      if (customerSessionId === undefined || customerSessionId === null) {
        throw new Error("Missing the required parameter 'customerSessionId' when calling updateCustomerSessionV2");
      }
      // verify the required parameter 'integrationRequest' is set
      if (integrationRequest === undefined || integrationRequest === null) {
        throw new Error("Missing the required parameter 'integrationRequest' when calling updateCustomerSessionV2");
      }

      let pathParams = {
        'customerSessionId': customerSessionId
      };
      let queryParams = {
        'dry': opts['dry']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key_v1'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationStateV2;
      return this.apiClient.callApi(
        '/v2/customer_sessions/{customerSessionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Customer Session
     * Update (or create) a [Customer Session](https://developers.talon.one/Getting-Started/entities#/customer-session). For example, use this endpoint to represent which items are in the customer's cart.  The Talon.One platform supports multiple simultaneous sessions for the same profile. If you have multiple ways of accessing the same application you can either:  - Track multiple independent sessions or, - Use the same session across all of them.  You should share sessions when application access points share other state, such as the user's cart. If two points of access to the application have independent states, for example a user can have different items in their cart across the two) they should use independent customer session ID's.  To link a session to a customer profile, set the `profileId` parameter in the request body to a customer profile's `integrationId`. To track an anonymous session use the empty string (`\"\"`) as the `profileId`. **Note:** You do **not** have to create a customer profile first. If the specified profile does not exist, an empty profile is created automatically.  Updating a customer session returns a response with the requested integration state. If `runRuleEngine` is set to `true`, the response includes:  - The effects generated by the triggered campaigns. - The created coupons and referral objects. - Any entity that was requested in the `responseContent` request parameter.  The currency for the session and the cart items in the session is the same as that of the application with which the session is associated. 
     * @param {String} customerSessionId The custom identifier for this session, must be unique within the account.
     * @param {module:model/IntegrationRequest} integrationRequest 
     * @param {Object} [opts] Optional parameters
     * @param {Boolean=} [opts.dry] Indicates whether to persist the changes. Changes are ignored when `dry=true`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IntegrationStateV2}
     */
    updateCustomerSessionV2(customerSessionId, integrationRequest, opts) {
      return this.updateCustomerSessionV2WithHttpInfo(customerSessionId, integrationRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
