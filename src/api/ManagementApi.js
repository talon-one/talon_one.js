/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import AccountAdditionalCost from '../model/AccountAdditionalCost';
import AccountAnalytics from '../model/AccountAnalytics';
import AddLoyaltyPoints from '../model/AddLoyaltyPoints';
import Application from '../model/Application';
import ApplicationApiHealth from '../model/ApplicationApiHealth';
import ApplicationCustomer from '../model/ApplicationCustomer';
import ApplicationSession from '../model/ApplicationSession';
import AsyncCouponCreationResponse from '../model/AsyncCouponCreationResponse';
import Attribute from '../model/Attribute';
import BaseNotification from '../model/BaseNotification';
import Campaign from '../model/Campaign';
import CampaignCopy from '../model/CampaignCopy';
import CampaignSearch from '../model/CampaignSearch';
import Collection from '../model/Collection';
import Coupon from '../model/Coupon';
import CreateTemplateCampaign from '../model/CreateTemplateCampaign';
import CreateTemplateCampaignResponse from '../model/CreateTemplateCampaignResponse';
import CustomerActivityReport from '../model/CustomerActivityReport';
import CustomerAnalytics from '../model/CustomerAnalytics';
import CustomerProfile from '../model/CustomerProfile';
import CustomerProfileSearchQuery from '../model/CustomerProfileSearchQuery';
import DeductLoyaltyPoints from '../model/DeductLoyaltyPoints';
import ErrorResponse from '../model/ErrorResponse';
import ErrorResponseWithStatus from '../model/ErrorResponseWithStatus';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse20015 from '../model/InlineResponse20015';
import InlineResponse20016 from '../model/InlineResponse20016';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse20018 from '../model/InlineResponse20018';
import InlineResponse20019 from '../model/InlineResponse20019';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import InlineResponse20024 from '../model/InlineResponse20024';
import InlineResponse20025 from '../model/InlineResponse20025';
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse20027 from '../model/InlineResponse20027';
import InlineResponse20028 from '../model/InlineResponse20028';
import InlineResponse20029 from '../model/InlineResponse20029';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse20030 from '../model/InlineResponse20030';
import InlineResponse20031 from '../model/InlineResponse20031';
import InlineResponse20032 from '../model/InlineResponse20032';
import InlineResponse20033 from '../model/InlineResponse20033';
import InlineResponse20034 from '../model/InlineResponse20034';
import InlineResponse20035 from '../model/InlineResponse20035';
import InlineResponse20036 from '../model/InlineResponse20036';
import InlineResponse20037 from '../model/InlineResponse20037';
import InlineResponse20038 from '../model/InlineResponse20038';
import InlineResponse20039 from '../model/InlineResponse20039';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse20040 from '../model/InlineResponse20040';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse2009 from '../model/InlineResponse2009';
import LoginParams from '../model/LoginParams';
import LoyaltyCard from '../model/LoyaltyCard';
import LoyaltyLedger from '../model/LoyaltyLedger';
import LoyaltyProgram from '../model/LoyaltyProgram';
import LoyaltyStatistics from '../model/LoyaltyStatistics';
import ModelImport from '../model/ModelImport';
import NewAdditionalCost from '../model/NewAdditionalCost';
import NewAttribute from '../model/NewAttribute';
import NewBaseNotification from '../model/NewBaseNotification';
import NewCampaignCollection from '../model/NewCampaignCollection';
import NewCollection from '../model/NewCollection';
import NewCouponCreationJob from '../model/NewCouponCreationJob';
import NewCoupons from '../model/NewCoupons';
import NewCouponsForMultipleRecipients from '../model/NewCouponsForMultipleRecipients';
import NewNotificationWebhook from '../model/NewNotificationWebhook';
import NewPassword from '../model/NewPassword';
import NewPasswordEmail from '../model/NewPasswordEmail';
import NotificationWebhook from '../model/NotificationWebhook';
import Referral from '../model/Referral';
import Role from '../model/Role';
import Ruleset from '../model/Ruleset';
import Session from '../model/Session';
import TransferLoyaltyCard from '../model/TransferLoyaltyCard';
import UpdateCampaign from '../model/UpdateCampaign';
import UpdateCampaignCollection from '../model/UpdateCampaignCollection';
import UpdateCollection from '../model/UpdateCollection';
import UpdateCoupon from '../model/UpdateCoupon';
import UpdateCouponBatch from '../model/UpdateCouponBatch';
import UpdateLoyaltyCard from '../model/UpdateLoyaltyCard';
import UpdateReferral from '../model/UpdateReferral';
import User from '../model/User';
import Webhook from '../model/Webhook';

/**
* Management service.
* @module api/ManagementApi
* @version 5.0.0
*/
export default class ManagementApi {

    /**
    * Constructs a new ManagementApi. 
    * @alias module:api/ManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add points to card
     * Add points to the given loyalty card in the specified card-based loyalty program. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/AddLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling addLoyaltyCardPoints");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling addLoyaltyCardPoints");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLoyaltyCardPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/add_points', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add points to card
     * Add points to the given loyalty card in the specified card-based loyalty program. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/AddLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addLoyaltyCardPoints(loyaltyProgramId, loyaltyCardId, body) {
      return this.addLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add points to customer profile
     * Add points in the specified loyalty program for the given customer.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {module:model/AddLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling addLoyaltyPoints");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling addLoyaltyPoints");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addLoyaltyPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/add_points', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add points to customer profile
     * Add points in the specified loyalty program for the given customer.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {module:model/AddLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addLoyaltyPoints(loyaltyProgramId, integrationId, body) {
      return this.addLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy the campaign into the specified Application
     * Copy the campaign into all specified Applications.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CampaignCopy} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    copyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling copyCampaignToApplications");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling copyCampaignToApplications");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling copyCampaignToApplications");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy the campaign into the specified Application
     * Copy the campaign into all specified Applications.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CampaignCopy} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    copyCampaignToApplications(applicationId, campaignId, body) {
      return this.copyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create account-level collection
     * Create account-level collection.
     * @param {module:model/NewCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    createAccountCollectionWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAccountCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create account-level collection
     * Create account-level collection.
     * @param {module:model/NewCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    createAccountCollection(body) {
      return this.createAccountCollectionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create additional cost
     * Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
     * @param {module:model/NewAdditionalCost} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountAdditionalCost} and HTTP response
     */
    createAdditionalCostWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAdditionalCost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountAdditionalCost;
      return this.apiClient.callApi(
        '/v1/additional_costs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create additional cost
     * Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
     * @param {module:model/NewAdditionalCost} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountAdditionalCost}
     */
    createAdditionalCost(body) {
      return this.createAdditionalCostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create custom attribute
     * Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a `zipCode` field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
     * @param {module:model/NewAttribute} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Attribute} and HTTP response
     */
    createAttributeWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createAttribute");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Attribute;
      return this.apiClient.callApi(
        '/v1/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create custom attribute
     * Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a `zipCode` field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
     * @param {module:model/NewAttribute} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Attribute}
     */
    createAttribute(body) {
      return this.createAttributeWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create campaign from campaign template
     * Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CreateTemplateCampaign} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateTemplateCampaignResponse} and HTTP response
     */
    createCampaignFromTemplateWithHttpInfo(applicationId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCampaignFromTemplate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCampaignFromTemplate");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTemplateCampaignResponse;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/create_campaign_from_template', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create campaign from campaign template
     * Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CreateTemplateCampaign} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateTemplateCampaignResponse}
     */
    createCampaignFromTemplate(applicationId, body) {
      return this.createCampaignFromTemplateWithHttpInfo(applicationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create collection
     * Create a collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCampaignCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    createCollectionWithHttpInfo(applicationId, campaignId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCollection");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createCollection");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCollection");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create collection
     * Create a collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCampaignCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    createCollection(applicationId, campaignId, body) {
      return this.createCollectionWithHttpInfo(applicationId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCoupons} body body
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] Possible values: `yes` or `no`. - `yes`: Increases the perfomance of the API call by returning a 204 response. - `no`: Returns a 200 response that contains the updated customer profiles.  (default to 'yes')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    createCouponsWithHttpInfo(applicationId, campaignId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCoupons");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createCoupons");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCoupons");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'silent': opts['silent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create coupons
     * Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCoupons} body body
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] Possible values: `yes` or `no`. - `yes`: Increases the perfomance of the API call by returning a 204 response. - `no`: Returns a 200 response that contains the updated customer profiles.  (default to 'yes')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    createCoupons(applicationId, campaignId, body, opts) {
      return this.createCouponsWithHttpInfo(applicationId, campaignId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create coupons asynchronously
     * Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCouponCreationJob} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncCouponCreationResponse} and HTTP response
     */
    createCouponsAsyncWithHttpInfo(applicationId, campaignId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCouponsAsync");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createCouponsAsync");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCouponsAsync");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AsyncCouponCreationResponse;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_async', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create coupons asynchronously
     * Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCouponCreationJob} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncCouponCreationResponse}
     */
    createCouponsAsync(applicationId, campaignId, body) {
      return this.createCouponsAsyncWithHttpInfo(applicationId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create coupons for multiple recipients
     * Create coupons according to some pattern for up to 1000 recipients.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCouponsForMultipleRecipients} body body
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] Possible values: `yes` or `no`. - `yes`: Increases the perfomance of the API call by returning a 204 response. - `no`: Returns a 200 response that contains the updated customer profiles.  (default to 'yes')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    createCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCouponsForMultipleRecipients");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createCouponsForMultipleRecipients");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCouponsForMultipleRecipients");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'silent': opts['silent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create coupons for multiple recipients
     * Create coupons according to some pattern for up to 1000 recipients.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewCouponsForMultipleRecipients} body body
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.silent] Possible values: `yes` or `no`. - `yes`: Increases the perfomance of the API call by returning a 204 response. - `no`: Returns a 200 response that contains the updated customer profiles.  (default to 'yes')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    createCouponsForMultipleRecipients(applicationId, campaignId, body, opts) {
      return this.createCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create notification about campaign-related changes
     * Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewNotificationWebhook} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationWebhook} and HTTP response
     */
    createNotificationWebhookWithHttpInfo(applicationId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createNotificationWebhook");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNotificationWebhook");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationWebhook;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/notification_webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create notification about campaign-related changes
     * Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewNotificationWebhook} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationWebhook}
     */
    createNotificationWebhook(applicationId, body) {
      return this.createNotificationWebhookWithHttpInfo(applicationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request a password reset
     * Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
     * @param {module:model/NewPasswordEmail} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewPasswordEmail} and HTTP response
     */
    createPasswordRecoveryEmailWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPasswordRecoveryEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewPasswordEmail;
      return this.apiClient.callApi(
        '/v1/password_recovery_emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request a password reset
     * Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
     * @param {module:model/NewPasswordEmail} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewPasswordEmail}
     */
    createPasswordRecoveryEmail(body) {
      return this.createPasswordRecoveryEmailWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create session
     * Create a session to use the Management API endpoints. Use the value of the `token` property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  <div class=\"redoc-section\">   <p class=\"title\">Granular API key</p>   Instead of using a session, you can also use the <a href=\"https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\">Management API key feature</a>   in the Campaign Manager to decide which endpoints can be used with a given key. </div> 
     * @param {module:model/LoginParams} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Session} and HTTP response
     */
    createSessionWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/v1/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create session
     * Create a session to use the Management API endpoints. Use the value of the `token` property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  <div class=\"redoc-section\">   <p class=\"title\">Granular API key</p>   Instead of using a session, you can also use the <a href=\"https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\">Management API key feature</a>   in the Campaign Manager to decide which endpoints can be used with a given key. </div> 
     * @param {module:model/LoginParams} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Session}
     */
    createSession(body) {
      return this.createSessionWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deduct points from card
     * Deduct points from the given loyalty card in the specified card-based loyalty program. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/DeductLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deductLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling deductLoyaltyCardPoints");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling deductLoyaltyCardPoints");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deductLoyaltyCardPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/deduct_points', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deduct points from card
     * Deduct points from the given loyalty card in the specified card-based loyalty program. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/DeductLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deductLoyaltyCardPoints(loyaltyProgramId, loyaltyCardId, body) {
      return this.deductLoyaltyCardPointsWithHttpInfo(loyaltyProgramId, loyaltyCardId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete account-level collection
     * Delete the given account-level collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAccountCollectionWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteAccountCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete account-level collection
     * Delete the given account-level collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAccountCollection(collectionId) {
      return this.deleteAccountCollectionWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete campaign
     * Delete the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCampaignWithHttpInfo(applicationId, campaignId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete campaign
     * Delete the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCampaign(applicationId, campaignId) {
      return this.deleteCampaignWithHttpInfo(applicationId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete collection
     * Delete the given collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCollectionWithHttpInfo(applicationId, campaignId, collectionId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCollection");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCollection");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollection");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete collection
     * Delete the given collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCollection(applicationId, campaignId, collectionId) {
      return this.deleteCollectionWithHttpInfo(applicationId, campaignId, collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete coupon
     * Delete the specified coupon.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} couponId The internal ID of the coupon code. You can find this value in the `id` property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCouponWithHttpInfo(applicationId, campaignId, couponId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCoupon");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCoupon");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling deleteCoupon");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete coupon
     * Delete the specified coupon.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} couponId The internal ID of the coupon code. You can find this value in the `id` property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCoupon(applicationId, campaignId, couponId) {
      return this.deleteCouponWithHttpInfo(applicationId, campaignId, couponId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete coupons
     * Deletes all the coupons matching the specified criteria.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.startsAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.startsBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.expiresAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.expiresBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] - `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - `validFuture`: Matches coupons in which start date is set and in the future. 
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {module:model/String=} [opts.usable] - `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field. 
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCouponsWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCoupons");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCoupons");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'startsAfter': opts['startsAfter'],
        'startsBefore': opts['startsBefore'],
        'expiresAfter': opts['expiresAfter'],
        'expiresBefore': opts['expiresBefore'],
        'valid': opts['valid'],
        'batchId': opts['batchId'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete coupons
     * Deletes all the coupons matching the specified criteria.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.startsAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.startsBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.expiresAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.expiresBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] - `expired`: Matches coupons in which the expiration date is set and in the past. - `validNow`: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - `validFuture`: Matches coupons in which start date is set and in the future. 
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {module:model/String=} [opts.usable] - `true`: only coupons where `usageCounter < usageLimit` will be returned. - `false`: only coupons where `usageCounter >= usageLimit` will be returned. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's `RecipientIntegrationId` field. 
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCoupons(applicationId, campaignId, opts) {
      return this.deleteCouponsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete loyalty card
     * Delete the given loyalty card.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId) {
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling deleteLoyaltyCard");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling deleteLoyaltyCard");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete loyalty card
     * Delete the given loyalty card.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLoyaltyCard(loyaltyProgramId, loyaltyCardId) {
      return this.deleteLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete notification about campaign-related changes
     * Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteNotificationWebhook");
      }
      // verify the required parameter 'notificationWebhookId' is set
      if (notificationWebhookId === undefined || notificationWebhookId === null) {
        throw new Error("Missing the required parameter 'notificationWebhookId' when calling deleteNotificationWebhook");
      }

      let pathParams = {
        'applicationId': applicationId,
        'notificationWebhookId': notificationWebhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete notification about campaign-related changes
     * Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteNotificationWebhook(applicationId, notificationWebhookId) {
      return this.deleteNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete referral
     * Delete the specified referral.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} referralId The ID of the referral code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteReferralWithHttpInfo(applicationId, campaignId, referralId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteReferral");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteReferral");
      }
      // verify the required parameter 'referralId' is set
      if (referralId === undefined || referralId === null) {
        throw new Error("Missing the required parameter 'referralId' when calling deleteReferral");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'referralId': referralId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete referral
     * Delete the specified referral.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} referralId The ID of the referral code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteReferral(applicationId, campaignId, referralId) {
      return this.deleteReferralWithHttpInfo(applicationId, campaignId, referralId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Destroy session
     * Destroys the session.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    destroySessionWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/sessions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Destroy session
     * Destroys the session.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    destroySession() {
      return this.destroySessionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export account-level collection's items
     * Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportAccountCollectionItemsWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling exportAccountCollectionItems");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export account-level collection's items
     * Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportAccountCollectionItems(collectionId) {
      return this.exportAccountCollectionItemsWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export a collection's items
     * Download a CSV file containing a collection's items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportCollectionItemsWithHttpInfo(applicationId, campaignId, collectionId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling exportCollectionItems");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling exportCollectionItems");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling exportCollectionItems");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export a collection's items
     * Download a CSV file containing a collection's items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportCollectionItems(applicationId, campaignId, collectionId) {
      return this.exportCollectionItemsWithHttpInfo(applicationId, campaignId, collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export coupons
     * Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - `accountid`: The ID of your deployment. - `applicationid`: The ID of the Application this coupon is related to. - `attributes`: A json object describing _custom_ referral attribute names and their values. - `batchid`: The ID of the batch this coupon is part of. - `campaignid`: The ID of the campaign this coupon is related to. - `counter`: The number of times this coupon has been redeemed. - `created`: The creation date of the coupon code. - `deleted`: Whether the coupon code is deleted. - `deleted_changelogid`: The ID of the delete event in the logs. - `discount_counter`: The amount of discount given by this coupon. - `discount_limitval`: The maximum discount amount that can be given be this coupon. - `expirydate`: The end date in RFC3339 of the code redemption period. - `id`: The internal ID of the coupon code. - `importid`: The ID of the import job that created this coupon. - `is_reservation_mandatory`: Whether this coupon requires a reservation to be redeemed. - `limits`: The limits set on this coupon. - `limitval`: The maximum number of redemptions of this code. - `recipientintegrationid`: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - `referralid`: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - `reservation`: Whether the coupon is reserved. - `reservation_counter`: How many times this coupon has been reserved. - `reservation_limitval`: The maximum of number of reservations this coupon can have. - `startdate`: The start date in RFC3339 of the code redemption period. - `value`: The coupon code. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportCouponsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling exportCoupons");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'campaignId': opts['campaignId'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch'],
        'dateFormat': opts['dateFormat'],
        'campaignState': opts['campaignState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/export_coupons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export coupons
     * Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - `accountid`: The ID of your deployment. - `applicationid`: The ID of the Application this coupon is related to. - `attributes`: A json object describing _custom_ referral attribute names and their values. - `batchid`: The ID of the batch this coupon is part of. - `campaignid`: The ID of the campaign this coupon is related to. - `counter`: The number of times this coupon has been redeemed. - `created`: The creation date of the coupon code. - `deleted`: Whether the coupon code is deleted. - `deleted_changelogid`: The ID of the delete event in the logs. - `discount_counter`: The amount of discount given by this coupon. - `discount_limitval`: The maximum discount amount that can be given be this coupon. - `expirydate`: The end date in RFC3339 of the code redemption period. - `id`: The internal ID of the coupon code. - `importid`: The ID of the import job that created this coupon. - `is_reservation_mandatory`: Whether this coupon requires a reservation to be redeemed. - `limits`: The limits set on this coupon. - `limitval`: The maximum number of redemptions of this code. - `recipientintegrationid`: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - `referralid`: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - `reservation`: Whether the coupon is reserved. - `reservation_counter`: How many times this coupon has been reserved. - `reservation_limitval`: The maximum of number of reservations this coupon can have. - `startdate`: The start date in RFC3339 of the code redemption period. - `value`: The coupon code. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportCoupons(applicationId, opts) {
      return this.exportCouponsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export customer sessions
     * Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - `id`: The internal ID of the session. - `firstsession`: Whether this is a first session. - `integrationid`: The integration ID of the session. - `applicationid`: The ID of the Application. - `profileid`: The internal ID of the customer profile. - `profileintegrationid`: The integration ID of the customer profile. - `created`: The timestamp when the session was created. - `state`: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - `cartitems`: The cart items in the session. - `discounts`: The discounts in the session. - `total`: The total value of the session. - `attributes`: The attributes set in the session. - `closedat`: Timestamp when the session was closed. - `cancelledat`: Timestamp when the session was cancelled. - `referral`: The referral code in the session. - `identifiers`: The identifiers in the session. - `additional_costs`: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - `updated`: Timestamp of the last session update. - `coupons`: Coupon codes in the session. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
     * @param {String=} [opts.profileIntegrationId] Only return sessions for the customer that matches this customer integration ID.
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @param {module:model/String=} [opts.customerSessionState] Filter results by state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportCustomerSessionsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling exportCustomerSessions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'profileIntegrationId': opts['profileIntegrationId'],
        'dateFormat': opts['dateFormat'],
        'customerSessionState': opts['customerSessionState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/export_customer_sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export customer sessions
     * Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - `id`: The internal ID of the session. - `firstsession`: Whether this is a first session. - `integrationid`: The integration ID of the session. - `applicationid`: The ID of the Application. - `profileid`: The internal ID of the customer profile. - `profileintegrationid`: The integration ID of the customer profile. - `created`: The timestamp when the session was created. - `state`: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - `cartitems`: The cart items in the session. - `discounts`: The discounts in the session. - `total`: The total value of the session. - `attributes`: The attributes set in the session. - `closedat`: Timestamp when the session was closed. - `cancelledat`: Timestamp when the session was cancelled. - `referral`: The referral code in the session. - `identifiers`: The identifiers in the session. - `additional_costs`: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - `updated`: Timestamp of the last session update. - `coupons`: Coupon codes in the session. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
     * @param {String=} [opts.profileIntegrationId] Only return sessions for the customer that matches this customer integration ID.
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @param {module:model/String=} [opts.customerSessionState] Filter results by state.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportCustomerSessions(applicationId, opts) {
      return this.exportCustomerSessionsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export triggered effects
     * Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `applicationid`: The ID of the Application. - `campaignid`: The ID of the campaign. - `couponid`: The ID of the coupon, when applicable to the effect. - `created`: The timestamp of the effect. - `event_type`: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - `eventid`: The internal ID of the effect. - `name`: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - `profileintegrationid`: The ID of the customer profile, when applicable. - `props`: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - `ruleindex`: The index of the rule. - `rulesetid`: The ID of the rule set. - `sessionid`: The internal ID of the session that triggered the effect. - `profileid`: The internal ID of the customer profile. - `sessionintegrationid`: The integration ID of the session. - `total_revenue`: The total revenue. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportEffectsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling exportEffects");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'campaignId': opts['campaignId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'dateFormat': opts['dateFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/export_effects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export triggered effects
     * Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `applicationid`: The ID of the Application. - `campaignid`: The ID of the campaign. - `couponid`: The ID of the coupon, when applicable to the effect. - `created`: The timestamp of the effect. - `event_type`: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - `eventid`: The internal ID of the effect. - `name`: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - `profileintegrationid`: The ID of the customer profile, when applicable. - `props`: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - `ruleindex`: The index of the rule. - `rulesetid`: The ID of the rule set. - `sessionid`: The internal ID of the session that triggered the effect. - `profileid`: The internal ID of the customer profile. - `sessionintegrationid`: The integration ID of the session. - `total_revenue`: The total revenue. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportEffects(applicationId, opts) {
      return this.exportEffectsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export customer loyalty balance to CSV
     * ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportLoyaltyBalanceWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling exportLoyaltyBalance");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export customer loyalty balance to CSV
     * ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportLoyaltyBalance(loyaltyProgramId, opts) {
      return this.exportLoyaltyBalanceWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export customer loyalty balances
     * Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `loyaltyProgramID`: The ID of the loyalty program. - `loyaltySubledger`: The name of the subdleger, when applicatble. - `profileIntegrationID`: The integration ID of the customer profile. - `currentBalance`: The current point balance. - `pendingBalance`: The number of pending points. - `expiredBalance`: The number of expired points. - `spentBalance`: The number of spent points. - `currentTier`: The tier that the customer is in at the time of the export. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportLoyaltyBalancesWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling exportLoyaltyBalances");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/export_customer_balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export customer loyalty balances
     * Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `loyaltyProgramID`: The ID of the loyalty program. - `loyaltySubledger`: The name of the subdleger, when applicatble. - `profileIntegrationID`: The integration ID of the customer profile. - `currentBalance`: The current point balance. - `pendingBalance`: The number of pending points. - `expiredBalance`: The number of expired points. - `spentBalance`: The number of spent points. - `currentTier`: The tier that the customer is in at the time of the export. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportLoyaltyBalances(loyaltyProgramId, opts) {
      return this.exportLoyaltyBalancesWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export all card transaction logs
     * Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - `loyaltyProgramID`: The ID of the loyalty program. - `loyaltySubledger`: The name of the subdleger, when applicatble. - `cardIdentifier`: The alphanumeric identifier of the loyalty card. - `cardState`:The state of the loyalty card. It can be `active` or `inactive`. - `currentBalance`: The current point balance. - `pendingBalance`: The number of pending points. - `expiredBalance`: The number of expired points. - `spentBalance`: The number of spent points. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportLoyaltyCardBalancesWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling exportLoyaltyCardBalances");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/export_card_balances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export all card transaction logs
     * Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - `loyaltyProgramID`: The ID of the loyalty program. - `loyaltySubledger`: The name of the subdleger, when applicatble. - `cardIdentifier`: The alphanumeric identifier of the loyalty card. - `cardState`:The state of the loyalty card. It can be `active` or `inactive`. - `currentBalance`: The current point balance. - `pendingBalance`: The number of pending points. - `expiredBalance`: The number of expired points. - `spentBalance`: The number of spent points. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.endDate] Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportLoyaltyCardBalances(loyaltyProgramId, opts) {
      return this.exportLoyaltyCardBalancesWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export card's ledger log
     * Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportLoyaltyCardLedgerWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling exportLoyaltyCardLedger");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling exportLoyaltyCardLedger");
      }
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling exportLoyaltyCardLedger");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling exportLoyaltyCardLedger");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'dateFormat': opts['dateFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/export_log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export card's ledger log
     * Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportLoyaltyCardLedger(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, opts) {
      return this.exportLoyaltyCardLedgerWithHttpInfo(loyaltyProgramId, loyaltyCardId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export customer's transaction logs
     * Download a CSV file containing a customer's transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `customerprofileid`: The ID of the profile. - `customersessionid`: The ID of the customer session. - `rulesetid`: The ID of the rule set. - `rulename`: The name of the rule. - `programid`: The ID of the loyalty program. - `type`: The type of the loyalty program. - `name`: The name of the loyalty program. - `subledgerid`: The ID of the subledger, when applicable. - `startdate`: The start date of the program. - `expirydate`: The expiration date of the program. - `id`: The ID of the transaction. - `created`: The timestamp of the creation of the loyalty program. - `amount`: The number of points in that transaction. - `archived`: Whether the session related to the transaction is archived. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportLoyaltyLedgerWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling exportLoyaltyLedger");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling exportLoyaltyLedger");
      }
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling exportLoyaltyLedger");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling exportLoyaltyLedger");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'integrationId': integrationId
      };
      let queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'dateFormat': opts['dateFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/export_log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export customer's transaction logs
     * Download a CSV file containing a customer's transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - `customerprofileid`: The ID of the profile. - `customersessionid`: The ID of the customer session. - `rulesetid`: The ID of the rule set. - `rulename`: The name of the rule. - `programid`: The ID of the loyalty program. - `type`: The type of the loyalty program. - `name`: The name of the loyalty program. - `subledgerid`: The ID of the subledger, when applicable. - `startdate`: The start date of the program. - `expirydate`: The expiration date of the program. - `id`: The ID of the transaction. - `created`: The timestamp of the creation of the loyalty program. - `amount`: The number of points in that transaction. - `archived`: Whether the session related to the transaction is archived. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportLoyaltyLedger(rangeStart, rangeEnd, loyaltyProgramId, integrationId, opts) {
      return this.exportLoyaltyLedgerWithHttpInfo(rangeStart, rangeEnd, loyaltyProgramId, integrationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Export referrals
     * Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - `code`: The referral code. - `advocateprofileintegrationid`: The profile ID of the advocate. - `startdate`: The start date in RFC3339 of the code redemption period. - `expirydate`: The end date in RFC3339 of the code redemption period. - `limitval`: The maximum number of redemptions of this code. Defaults to `1` when left blank. - `attributes`: A json object describing _custom_ referral attribute names and their values. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] - `expired`: Matches referrals in which the expiration date is set and in the past. - `validNow`: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - `validFuture`: Matches referrals in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] - `true`, only referrals where `usageCounter < usageLimit` will be returned. - `false`, only referrals where `usageCounter >= usageLimit` will be returned. 
     * @param {String=} [opts.batchId] Filter results by batches of referrals
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    exportReferralsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling exportReferrals");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'campaignId': opts['campaignId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'batchId': opts['batchId'],
        'dateFormat': opts['dateFormat']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/export_referrals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Export referrals
     * Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - `code`: The referral code. - `advocateprofileintegrationid`: The profile ID of the advocate. - `startdate`: The start date in RFC3339 of the code redemption period. - `expirydate`: The end date in RFC3339 of the code redemption period. - `limitval`: The maximum number of redemptions of this code. Defaults to `1` when left blank. - `attributes`: A json object describing _custom_ referral attribute names and their values. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] - `expired`: Matches referrals in which the expiration date is set and in the past. - `validNow`: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - `validFuture`: Matches referrals in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] - `true`, only referrals where `usageCounter < usageLimit` will be returned. - `false`, only referrals where `usageCounter >= usageLimit` will be returned. 
     * @param {String=} [opts.batchId] Filter results by batches of referrals
     * @param {module:model/String=} [opts.dateFormat] Determines the format of dates in the export document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    exportReferrals(applicationId, opts) {
      return this.exportReferralsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get access logs for Application
     * Retrieve the list of API calls sent to the specified Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.path] Only return results where the request path matches the given regular expression.
     * @param {module:model/String=} [opts.method] Only return results where the request method matches the given regular expression.
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20018} and HTTP response
     */
    getAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAccessLogsWithoutTotalCount");
      }
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getAccessLogsWithoutTotalCount");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getAccessLogsWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'path': opts['path'],
        'method': opts['method'],
        'status': opts['status'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/access_logs/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get access logs for Application
     * Retrieve the list of API calls sent to the specified Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.path] Only return results where the request path matches the given regular expression.
     * @param {module:model/String=} [opts.method] Only return results where the request method matches the given regular expression.
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20018}
     */
    getAccessLogsWithoutTotalCount(applicationId, rangeStart, rangeEnd, opts) {
      return this.getAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get account details
     * Return the details of your companies Talon.One account. 
     * @param {Number} accountId The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the `accountId` property. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Account} and HTTP response
     */
    getAccountWithHttpInfo(accountId) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccount");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/v1/accounts/{accountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get account details
     * Return the details of your companies Talon.One account. 
     * @param {Number} accountId The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the `accountId` property. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Account}
     */
    getAccount(accountId) {
      return this.getAccountWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get account analytics
     * Return the analytics of your Talon.One account. 
     * @param {Number} accountId The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the `accountId` property. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountAnalytics} and HTTP response
     */
    getAccountAnalyticsWithHttpInfo(accountId) {
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountAnalytics");
      }

      let pathParams = {
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountAnalytics;
      return this.apiClient.callApi(
        '/v1/accounts/{accountId}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get account analytics
     * Return the analytics of your Talon.One account. 
     * @param {Number} accountId The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the `accountId` property. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountAnalytics}
     */
    getAccountAnalytics(accountId) {
      return this.getAccountAnalyticsWithHttpInfo(accountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get account-level collection
     * Retrieve a given account-level collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    getAccountCollectionWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getAccountCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get account-level collection
     * Retrieve a given account-level collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    getAccountCollection(collectionId) {
      return this.getAccountCollectionWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get additional cost
     * Returns the additional cost. 
     * @param {Number} additionalCostId The ID of the additional cost. You can find the ID the the Campaign Manager's URL when you display the details of the cost in **Account** > **Tools** > **Additional costs**. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountAdditionalCost} and HTTP response
     */
    getAdditionalCostWithHttpInfo(additionalCostId) {
      let postBody = null;
      // verify the required parameter 'additionalCostId' is set
      if (additionalCostId === undefined || additionalCostId === null) {
        throw new Error("Missing the required parameter 'additionalCostId' when calling getAdditionalCost");
      }

      let pathParams = {
        'additionalCostId': additionalCostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountAdditionalCost;
      return this.apiClient.callApi(
        '/v1/additional_costs/{additionalCostId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get additional cost
     * Returns the additional cost. 
     * @param {Number} additionalCostId The ID of the additional cost. You can find the ID the the Campaign Manager's URL when you display the details of the cost in **Account** > **Tools** > **Additional costs**. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountAdditionalCost}
     */
    getAdditionalCost(additionalCostId) {
      return this.getAdditionalCostWithHttpInfo(additionalCostId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List additional costs
     * Returns all the defined additional costs for the account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20032} and HTTP response
     */
    getAdditionalCostsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;
      return this.apiClient.callApi(
        '/v1/additional_costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List additional costs
     * Returns all the defined additional costs for the account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20032}
     */
    getAdditionalCosts(opts) {
      return this.getAdditionalCostsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.path] Only return results where the request path matches the given regular expression.
     * @param {module:model/String=} [opts.method] Only return results where the request method matches the given regular expression.
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20019} and HTTP response
     */
    getAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getAllAccessLogs");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getAllAccessLogs");
      }

      let pathParams = {
      };
      let queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'path': opts['path'],
        'method': opts['method'],
        'status': opts['status'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;
      return this.apiClient.callApi(
        '/v1/access_logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List access logs
     * Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.path] Only return results where the request path matches the given regular expression.
     * @param {module:model/String=} [opts.method] Only return results where the request method matches the given regular expression.
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20019}
     */
    getAllAccessLogs(rangeStart, rangeEnd, opts) {
      return this.getAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List roles
     * List all roles.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20040} and HTTP response
     */
    getAllRolesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;
      return this.apiClient.callApi(
        '/v1/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List roles
     * List all roles.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20040}
     */
    getAllRoles() {
      return this.getAllRolesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application
     * Get the application specified by the ID.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Application} and HTTP response
     */
    getApplicationWithHttpInfo(applicationId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Application
     * Get the application specified by the ID.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Application}
     */
    getApplication(applicationId) {
      return this.getApplicationWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application health
     * Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationApiHealth} and HTTP response
     */
    getApplicationApiHealthWithHttpInfo(applicationId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationApiHealth");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationApiHealth;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/health_report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Application health
     * Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationApiHealth}
     */
    getApplicationApiHealth(applicationId) {
      return this.getApplicationApiHealthWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get application's customer
     * Retrieve the customers of the specified application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationCustomer} and HTTP response
     */
    getApplicationCustomerWithHttpInfo(applicationId, customerId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomer");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getApplicationCustomer");
      }

      let pathParams = {
        'applicationId': applicationId,
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationCustomer;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get application's customer
     * Retrieve the customers of the specified application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationCustomer}
     */
    getApplicationCustomer(applicationId, customerId) {
      return this.getApplicationCustomerWithHttpInfo(applicationId, customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List friends referred by customer profile
     * List the friends referred by the specified customer profile in this Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {String} integrationId The Integration ID of the Advocate's Profile.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20030} and HTTP response
     */
    getApplicationCustomerFriendsWithHttpInfo(applicationId, integrationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomerFriends");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getApplicationCustomerFriends");
      }

      let pathParams = {
        'applicationId': applicationId,
        'integrationId': integrationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'withTotalResultSize': opts['withTotalResultSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/profile/{integrationId}/friends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List friends referred by customer profile
     * List the friends referred by the specified customer profile in this Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {String} integrationId The Integration ID of the Advocate's Profile.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20030}
     */
    getApplicationCustomerFriends(applicationId, integrationId, opts) {
      return this.getApplicationCustomerFriendsWithHttpInfo(applicationId, integrationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List application's customers
     * List all the customers of the specified application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.integrationId] Filter results performing an exact matching against the profile integration identifier.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20021} and HTTP response
     */
    getApplicationCustomersWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomers");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'integrationId': opts['integrationId'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'withTotalResultSize': opts['withTotalResultSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List application's customers
     * List all the customers of the specified application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.integrationId] Filter results performing an exact matching against the profile integration identifier.
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20021}
     */
    getApplicationCustomers(applicationId, opts) {
      return this.getApplicationCustomersWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List application customers matching the given attributes
     * Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CustomerProfileSearchQuery} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20022} and HTTP response
     */
    getApplicationCustomersByAttributesWithHttpInfo(applicationId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationCustomersByAttributes");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getApplicationCustomersByAttributes");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'withTotalResultSize': opts['withTotalResultSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List application customers matching the given attributes
     * Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CustomerProfileSearchQuery} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20022}
     */
    getApplicationCustomersByAttributes(applicationId, body, opts) {
      return this.getApplicationCustomersByAttributesWithHttpInfo(applicationId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications event types
     * Get all of the distinct values of the Event `type` property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20028} and HTTP response
     */
    getApplicationEventTypesWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationEventTypes");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/event_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Applications event types
     * Get all of the distinct values of the Event `type` property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20028}
     */
    getApplicationEventTypes(applicationId, opts) {
      return this.getApplicationEventTypesWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.type] Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {String=} [opts.session] Session integration ID filter for events. Must be exact match.
     * @param {String=} [opts.profile] Profile integration ID filter for events. Must be exact match.
     * @param {String=} [opts.customerName] Customer name filter for events. Will match substrings case-insensitively.
     * @param {String=} [opts.customerEmail] Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String=} [opts.couponCode] Coupon code
     * @param {String=} [opts.referralCode] Referral code
     * @param {String=} [opts.ruleQuery] Rule name filter for events
     * @param {String=} [opts.campaignQuery] Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20027} and HTTP response
     */
    getApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationEventsWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'type': opts['type'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'session': opts['session'],
        'profile': opts['profile'],
        'customerName': opts['customerName'],
        'customerEmail': opts['customerEmail'],
        'couponCode': opts['couponCode'],
        'referralCode': opts['referralCode'],
        'ruleQuery': opts['ruleQuery'],
        'campaignQuery': opts['campaignQuery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/events/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Applications events
     * Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.type] Comma-separated list of types by which to filter events. Must be exact match(es).
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {String=} [opts.session] Session integration ID filter for events. Must be exact match.
     * @param {String=} [opts.profile] Profile integration ID filter for events. Must be exact match.
     * @param {String=} [opts.customerName] Customer name filter for events. Will match substrings case-insensitively.
     * @param {String=} [opts.customerEmail] Customer e-mail address filter for events. Will match substrings case-insensitively.
     * @param {String=} [opts.couponCode] Coupon code
     * @param {String=} [opts.referralCode] Referral code
     * @param {String=} [opts.ruleQuery] Rule name filter for events
     * @param {String=} [opts.campaignQuery] Campaign name filter for events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20027}
     */
    getApplicationEventsWithoutTotalCount(applicationId, opts) {
      return this.getApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Application session
     * Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} sessionId The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationSession} and HTTP response
     */
    getApplicationSessionWithHttpInfo(applicationId, sessionId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getApplicationSession");
      }

      let pathParams = {
        'applicationId': applicationId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationSession;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Application session
     * Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} sessionId The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationSession}
     */
    getApplicationSession(applicationId, sessionId) {
      return this.getApplicationSessionWithHttpInfo(applicationId, sessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Application sessions
     * List all the sessions of the specified Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.profile] Profile integration ID filter for sessions. Must be exact match.
     * @param {module:model/String=} [opts.state] Filter by sessions with this state. Must be exact match.
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {String=} [opts.coupon] Filter by sessions with this coupon. Must be exact match.
     * @param {String=} [opts.referral] Filter by sessions with this referral. Must be exact match.
     * @param {String=} [opts.integrationId] Filter by sessions with this integrationId. Must be exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20026} and HTTP response
     */
    getApplicationSessionsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationSessions");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'profile': opts['profile'],
        'state': opts['state'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'coupon': opts['coupon'],
        'referral': opts['referral'],
        'integrationId': opts['integrationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Application sessions
     * List all the sessions of the specified Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.profile] Profile integration ID filter for sessions. Must be exact match.
     * @param {module:model/String=} [opts.state] Filter by sessions with this state. Must be exact match.
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {String=} [opts.coupon] Filter by sessions with this coupon. Must be exact match.
     * @param {String=} [opts.referral] Filter by sessions with this referral. Must be exact match.
     * @param {String=} [opts.integrationId] Filter by sessions with this integrationId. Must be exact match.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20026}
     */
    getApplicationSessions(applicationId, opts) {
      return this.getApplicationSessionsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Applications
     * List all applications in the current account.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2003} and HTTP response
     */
    getApplicationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/v1/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Applications
     * List all applications in the current account.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2003}
     */
    getApplications(opts) {
      return this.getApplicationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get custom attribute
     * Retrieve the specified custom attribute. 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Attribute} and HTTP response
     */
    getAttributeWithHttpInfo(attributeId) {
      let postBody = null;
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling getAttribute");
      }

      let pathParams = {
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Attribute;
      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get custom attribute
     * Retrieve the specified custom attribute. 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Attribute}
     */
    getAttribute(attributeId) {
      return this.getAttributeWithHttpInfo(attributeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List custom attributes
     * Return all the custom attributes for the account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.entity] Returned attributes will be filtered by supplied entity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20031} and HTTP response
     */
    getAttributesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'entity': opts['entity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;
      return this.apiClient.callApi(
        '/v1/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List custom attributes
     * Return all the custom attributes for the account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.entity] Returned attributes will be filtered by supplied entity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20031}
     */
    getAttributes(opts) {
      return this.getAttributesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List audiences
     * Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20029} and HTTP response
     */
    getAudiencesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'withTotalResultSize': opts['withTotalResultSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;
      return this.apiClient.callApi(
        '/v1/audiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List audiences
     * Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20029}
     */
    getAudiences(opts) {
      return this.getAudiencesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get campaign
     * Retrieve the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response
     */
    getCampaignWithHttpInfo(applicationId, campaignId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaign");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get campaign
     * Retrieve the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}
     */
    getCampaign(applicationId, campaignId) {
      return this.getCampaignWithHttpInfo(applicationId, campaignId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get analytics of campaigns
     * Retrieve statistical data about the performance of the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.granularity] The time interval between the results in the returned time-series.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20020} and HTTP response
     */
    getCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignAnalytics");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignAnalytics");
      }
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCampaignAnalytics");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCampaignAnalytics");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'granularity': opts['granularity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get analytics of campaigns
     * Retrieve statistical data about the performance of the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.granularity] The time interval between the results in the returned time-series.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20020}
     */
    getCampaignAnalytics(applicationId, campaignId, rangeStart, rangeEnd, opts) {
      return this.getCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List campaigns that match the given attributes
     * Get a list of all the campaigns that match a set of attributes. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CampaignSearch} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    getCampaignByAttributesWithHttpInfo(applicationId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignByAttributes");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCampaignByAttributes");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'campaignState': opts['campaignState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List campaigns that match the given attributes
     * Get a list of all the campaigns that match a set of attributes. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/CampaignSearch} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    getCampaignByAttributes(applicationId, body, opts) {
      return this.getCampaignByAttributesWithHttpInfo(applicationId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List campaign templates
     * Retrieve a list of campaign templates.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.state] Filter results by the state of the campaign template.
     * @param {String=} [opts.name] Filter results performing case-insensitive matching against the name of the campaign template.
     * @param {String=} [opts.tags] Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \"name\" query parameter, a logical OR will be performed to search both tags and name for the provided values. 
     * @param {Number=} [opts.userId] Filter results by user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20010} and HTTP response
     */
    getCampaignTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'state': opts['state'],
        'name': opts['name'],
        'tags': opts['tags'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/v1/campaign_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List campaign templates
     * Retrieve a list of campaign templates.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.state] Filter results by the state of the campaign template.
     * @param {String=} [opts.name] Filter results performing case-insensitive matching against the name of the campaign template.
     * @param {String=} [opts.tags] Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \"name\" query parameter, a logical OR will be performed to search both tags and name for the provided values. 
     * @param {Number=} [opts.userId] Filter results by user ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20010}
     */
    getCampaignTemplates(opts) {
      return this.getCampaignTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List campaigns
     * List the campaigns of the specified application that match your filter criteria. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @param {String=} [opts.name] Filter results performing case-insensitive matching against the name of the campaign.
     * @param {String=} [opts.tags] Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \"name\" query parameter, a logical OR will be performed to search both tags and name for the provided values 
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Number=} [opts.campaignGroupId] Filter results to campaigns owned by the specified campaign group ID.
     * @param {Number=} [opts.templateId] The ID of the Campaign Template this Campaign was created from.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
     */
    getCampaignsWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaigns");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'campaignState': opts['campaignState'],
        'name': opts['name'],
        'tags': opts['tags'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'campaignGroupId': opts['campaignGroupId'],
        'templateId': opts['templateId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List campaigns
     * List the campaigns of the specified application that match your filter criteria. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @param {String=} [opts.name] Filter results performing case-insensitive matching against the name of the campaign.
     * @param {String=} [opts.tags] Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \"name\" query parameter, a logical OR will be performed to search both tags and name for the provided values 
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Number=} [opts.campaignGroupId] Filter results to campaigns owned by the specified campaign group ID.
     * @param {Number=} [opts.templateId] The ID of the Campaign Template this Campaign was created from.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
     */
    getCampaigns(applicationId, opts) {
      return this.getCampaignsWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get audit logs for an account
     * Retrieve the audit logs displayed in **Accounts > Audit logs**. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {String=} [opts.entityPath] Filter results on a case insensitive matching of the url path of the entity
     * @param {Number=} [opts.userId] Filter results by user ID.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {Number=} [opts.managementKeyId] Filter results that match the given management key ID.
     * @param {Boolean=} [opts.includeOld] When this flag is set to false, the state without the change will not be returned. The default value is true.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20038} and HTTP response
     */
    getChangesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'applicationId': opts['applicationId'],
        'entityPath': opts['entityPath'],
        'userId': opts['userId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'withTotalResultSize': opts['withTotalResultSize'],
        'managementKeyId': opts['managementKeyId'],
        'includeOld': opts['includeOld']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20038;
      return this.apiClient.callApi(
        '/v1/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get audit logs for an account
     * Retrieve the audit logs displayed in **Accounts > Audit logs**. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {String=} [opts.entityPath] Filter results on a case insensitive matching of the url path of the entity
     * @param {Number=} [opts.userId] Filter results by user ID.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {Number=} [opts.managementKeyId] Filter results that match the given management key ID.
     * @param {Boolean=} [opts.includeOld] When this flag is set to false, the state without the change will not be returned. The default value is true.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20038}
     */
    getChanges(opts) {
      return this.getChangesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection
     * Retrieve a given collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    getCollectionWithHttpInfo(applicationId, campaignId, collectionId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCollection");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCollection");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollection");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection
     * Retrieve a given collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    getCollection(applicationId, campaignId, collectionId) {
      return this.getCollectionWithHttpInfo(applicationId, campaignId, collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get collection items
     * Retrieve the items from the given collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20016} and HTTP response
     */
    getCollectionItemsWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionItems");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get collection items
     * Retrieve the items from the given collection.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20016}
     */
    getCollectionItems(collectionId, opts) {
      return this.getCollectionItemsWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List coupons
     * List all the coupons matching the specified criteria. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    getCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCouponsWithoutTotalCount");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCouponsWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List coupons
     * List all the coupons matching the specified criteria. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    getCouponsWithoutTotalCount(applicationId, campaignId, opts) {
      return this.getCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get customer's activity report
     * Fetch the summary report of a given customer in the given application, in a time range.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerActivityReport} and HTTP response
     */
    getCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCustomerActivityReport");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReport");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerActivityReport");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerActivityReport");
      }

      let pathParams = {
        'applicationId': applicationId,
        'customerId': customerId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerActivityReport;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_activity_reports/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get customer's activity report
     * Fetch the summary report of a given customer in the given application, in a time range.
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerActivityReport}
     */
    getCustomerActivityReport(rangeStart, rangeEnd, applicationId, customerId, opts) {
      return this.getCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.name] Only return reports matching the customer name
     * @param {String=} [opts.integrationId] Filter results performing an exact matching against the profile integration identifier.
     * @param {String=} [opts.campaignName] Only return reports matching the campaignName
     * @param {String=} [opts.advocateName] Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20025} and HTTP response
     */
    getCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rangeStart' is set
      if (rangeStart === undefined || rangeStart === null) {
        throw new Error("Missing the required parameter 'rangeStart' when calling getCustomerActivityReportsWithoutTotalCount");
      }
      // verify the required parameter 'rangeEnd' is set
      if (rangeEnd === undefined || rangeEnd === null) {
        throw new Error("Missing the required parameter 'rangeEnd' when calling getCustomerActivityReportsWithoutTotalCount");
      }
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerActivityReportsWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'rangeStart': rangeStart,
        'rangeEnd': rangeEnd,
        'name': opts['name'],
        'integrationId': opts['integrationId'],
        'campaignName': opts['campaignName'],
        'advocateName': opts['advocateName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customer_activity_reports/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Activity Reports for Application Customers
     * Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
     * @param {Date} rangeStart Only return results from after this timestamp. This must be an RFC3339 timestamp string.
     * @param {Date} rangeEnd Only return results from before this timestamp. This must be an RFC3339 timestamp string.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.name] Only return reports matching the customer name
     * @param {String=} [opts.integrationId] Filter results performing an exact matching against the profile integration identifier.
     * @param {String=} [opts.campaignName] Only return reports matching the campaignName
     * @param {String=} [opts.advocateName] Only return reports matching the current customer referrer name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20025}
     */
    getCustomerActivityReportsWithoutTotalCount(rangeStart, rangeEnd, applicationId, opts) {
      return this.getCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get customer's analytics report
     * Fetch analytics for a given customer in the given application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerAnalytics} and HTTP response
     */
    getCustomerAnalyticsWithHttpInfo(applicationId, customerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCustomerAnalytics");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAnalytics");
      }

      let pathParams = {
        'applicationId': applicationId,
        'customerId': customerId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerAnalytics;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/customers/{customerId}/analytics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get customer's analytics report
     * Fetch analytics for a given customer in the given application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerAnalytics}
     */
    getCustomerAnalytics(applicationId, customerId, opts) {
      return this.getCustomerAnalyticsWithHttpInfo(applicationId, customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get customer profile
     * Return the details of the specified customer profile.  <div class=\"redoc-section\">   <p class=\"title\">Performance tips</p>    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with `runRuleEngine=false`. </div> 
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerProfile} and HTTP response
     */
    getCustomerProfileWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerProfile");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerProfile;
      return this.apiClient.callApi(
        '/v1/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get customer profile
     * Return the details of the specified customer profile.  <div class=\"redoc-section\">   <p class=\"title\">Performance tips</p>    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with `runRuleEngine=false`. </div> 
     * @param {Number} customerId The value of the `id` property of a customer profile. Get it with the [List Application's customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerProfile}
     */
    getCustomerProfile(customerId) {
      return this.getCustomerProfileWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List customer profiles
     * List all customer profiles.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.sandbox] Indicates whether you are pointing to a sandbox or Live customer. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20024} and HTTP response
     */
    getCustomerProfilesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sandbox': opts['sandbox']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/v1/customers/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List customer profiles
     * List all customer profiles.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.sandbox] Indicates whether you are pointing to a sandbox or Live customer. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20024}
     */
    getCustomerProfiles(opts) {
      return this.getCustomerProfilesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List customer profiles matching the given attributes
     * Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     * @param {module:model/CustomerProfileSearchQuery} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.sandbox] Indicates whether you are pointing to a sandbox or Live customer. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20023} and HTTP response
     */
    getCustomersByAttributesWithHttpInfo(body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCustomersByAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sandbox': opts['sandbox']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;
      return this.apiClient.callApi(
        '/v1/customer_search/no_total', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List customer profiles matching the given attributes
     * Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
     * @param {module:model/CustomerProfileSearchQuery} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Boolean=} [opts.sandbox] Indicates whether you are pointing to a sandbox or Live customer. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20023}
     */
    getCustomersByAttributes(body, opts) {
      return this.getCustomersByAttributesWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List event types
     * Fetch all event type definitions for your account. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.name] Filter results to event types with the given name. This parameter implies `includeOldVersions`.
     * @param {Boolean=} [opts.includeOldVersions] Include all versions of every event type. (default to false)
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20036} and HTTP response
     */
    getEventTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'includeOldVersions': opts['includeOldVersions'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20036;
      return this.apiClient.callApi(
        '/v1/event_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List event types
     * Fetch all event type definitions for your account. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.name] Filter results to event types with the given name. This parameter implies `includeOldVersions`.
     * @param {Boolean=} [opts.includeOldVersions] Include all versions of every event type. (default to false)
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20036}
     */
    getEventTypes(opts) {
      return this.getEventTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exports
     * List all past exports 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter by the campaign ID on which the limit counters are used.
     * @param {module:model/String=} [opts.entity] The name of the entity type that was exported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20039} and HTTP response
     */
    getExportsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'entity': opts['entity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20039;
      return this.apiClient.callApi(
        '/v1/exports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get exports
     * List all past exports 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter by the campaign ID on which the limit counters are used.
     * @param {module:model/String=} [opts.entity] The name of the entity type that was exported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20039}
     */
    getExports(opts) {
      return this.getExportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get loyalty card
     * Get the given loyalty card.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCard} and HTTP response
     */
    getLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId) {
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyCard");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling getLoyaltyCard");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltyCard;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get loyalty card
     * Get the given loyalty card.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCard}
     */
    getLoyaltyCard(loyaltyProgramId, loyaltyCardId) {
      return this.getLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List card's transactions
     * Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.startDate] Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Date=} [opts.endDate] Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.subledgerId] The ID of the subledger by which we filter the data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20014} and HTTP response
     */
    getLoyaltyCardTransactionLogsWithHttpInfo(loyaltyProgramId, loyaltyCardId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyCardTransactionLogs");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling getLoyaltyCardTransactionLogs");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'subledgerId': opts['subledgerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List card's transactions
     * Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Date=} [opts.startDate] Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Date=} [opts.endDate] Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.subledgerId] The ID of the subledger by which we filter the data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20014}
     */
    getLoyaltyCardTransactionLogs(loyaltyProgramId, loyaltyCardId, opts) {
      return this.getLoyaltyCardTransactionLogsWithHttpInfo(loyaltyProgramId, loyaltyCardId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List loyalty cards
     * For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.identifier] Optional query parameter to search cards by identifier.
     * @param {Number=} [opts.profileId] Filter by the profile ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20013} and HTTP response
     */
    getLoyaltyCardsWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyCards");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'identifier': opts['identifier'],
        'profileId': opts['profileId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List loyalty cards
     * For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.identifier] Optional query parameter to search cards by identifier.
     * @param {Number=} [opts.profileId] Filter by the profile ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20013}
     */
    getLoyaltyCards(loyaltyProgramId, opts) {
      return this.getLoyaltyCardsWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get customer's full loyalty ledger
     * Get the loyalty ledger for this profile integration ID.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API's [Get customer's loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyLedger} and HTTP response
     */
    getLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId) {
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyPoints");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getLoyaltyPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltyLedger;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get customer's full loyalty ledger
     * Get the loyalty ledger for this profile integration ID.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API's [Get customer's loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyLedger}
     */
    getLoyaltyPoints(loyaltyProgramId, integrationId) {
      return this.getLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get loyalty program
     * Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyProgram} and HTTP response
     */
    getLoyaltyProgramWithHttpInfo(loyaltyProgramId) {
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyProgram");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltyProgram;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get loyalty program
     * Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyProgram}
     */
    getLoyaltyProgram(loyaltyProgramId) {
      return this.getLoyaltyProgramWithHttpInfo(loyaltyProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List loyalty program transactions
     * Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API's [Get customer's loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.loyaltyTransactionType] Filter results by loyalty transaction type: - `manual`: Loyalty transaction that was done manually. - `session`: Loyalty transaction that resulted from a customer session. - `import`: Loyalty transaction that was imported from a CSV file. 
     * @param {String=} [opts.subledgerId] The ID of the subledger by which we filter the data.
     * @param {Date=} [opts.startDate] Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Date=} [opts.endDate] Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 50)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20012} and HTTP response
     */
    getLoyaltyProgramTransactionsWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyProgramTransactions");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
        'loyaltyTransactionType': opts['loyaltyTransactionType'],
        'subledgerId': opts['subledgerId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List loyalty program transactions
     * Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API's [Get customer's loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {module:model/String=} [opts.loyaltyTransactionType] Filter results by loyalty transaction type: - `manual`: Loyalty transaction that was done manually. - `session`: Loyalty transaction that resulted from a customer session. - `import`: Loyalty transaction that was imported from a CSV file. 
     * @param {String=} [opts.subledgerId] The ID of the subledger by which we filter the data.
     * @param {Date=} [opts.startDate] Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Date=} [opts.endDate] Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 50)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20012}
     */
    getLoyaltyProgramTransactions(loyaltyProgramId, opts) {
      return this.getLoyaltyProgramTransactionsWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List loyalty programs
     * List the loyalty programs of the account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20011} and HTTP response
     */
    getLoyaltyProgramsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/v1/loyalty_programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List loyalty programs
     * List the loyalty programs of the account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20011}
     */
    getLoyaltyPrograms() {
      return this.getLoyaltyProgramsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get loyalty program statistics
     * Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyStatistics} and HTTP response
     */
    getLoyaltyStatisticsWithHttpInfo(loyaltyProgramId) {
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling getLoyaltyStatistics");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoyaltyStatistics;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get loyalty program statistics
     * Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyStatistics}
     */
    getLoyaltyStatistics(loyaltyProgramId) {
      return this.getLoyaltyStatisticsWithHttpInfo(loyaltyProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get notification about campaign-related changes
     * Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationWebhook} and HTTP response
     */
    getNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getNotificationWebhook");
      }
      // verify the required parameter 'notificationWebhookId' is set
      if (notificationWebhookId === undefined || notificationWebhookId === null) {
        throw new Error("Missing the required parameter 'notificationWebhookId' when calling getNotificationWebhook");
      }

      let pathParams = {
        'applicationId': applicationId,
        'notificationWebhookId': notificationWebhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationWebhook;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get notification about campaign-related changes
     * Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationWebhook}
     */
    getNotificationWebhook(applicationId, notificationWebhookId) {
      return this.getNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List notifications about campaign-related changes
     * List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
     */
    getNotificationWebhooksWithHttpInfo(applicationId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getNotificationWebhooks");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/notification_webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List notifications about campaign-related changes
     * List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
     */
    getNotificationWebhooks(applicationId) {
      return this.getNotificationWebhooksWithHttpInfo(applicationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List referrals
     * List all referrals of the specified campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.code] Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only referrals where `usageCounter < usageLimit` will be returned, \"false\" will return only referrals where `usageCounter >= usageLimit`. 
     * @param {String=} [opts.advocate] Filter results by match with a profile id specified in the referral's AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2009} and HTTP response
     */
    getReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getReferralsWithoutTotalCount");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReferralsWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'code': opts['code'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'advocate': opts['advocate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List referrals
     * List all referrals of the specified campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.code] Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only referrals where `usageCounter < usageLimit` will be returned, \"false\" will return only referrals where `usageCounter >= usageLimit`. 
     * @param {String=} [opts.advocate] Filter results by match with a profile id specified in the referral's AdvocateProfileIntegrationId field
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2009}
     */
    getReferralsWithoutTotalCount(applicationId, campaignId, opts) {
      return this.getReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get role
     * Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
     * @param {Number} roleId The Id of role. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Role} and HTTP response
     */
    getRoleWithHttpInfo(roleId) {
      let postBody = null;
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling getRole");
      }

      let pathParams = {
        'roleId': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/v1/roles/{roleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get role
     * Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
     * @param {Number} roleId The Id of role. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Role}
     */
    getRole(roleId) {
      return this.getRoleWithHttpInfo(roleId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get ruleset
     * Retrieve the specified ruleset.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} rulesetId The ID of the ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Ruleset} and HTTP response
     */
    getRulesetWithHttpInfo(applicationId, campaignId, rulesetId) {
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getRuleset");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRuleset");
      }
      // verify the required parameter 'rulesetId' is set
      if (rulesetId === undefined || rulesetId === null) {
        throw new Error("Missing the required parameter 'rulesetId' when calling getRuleset");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'rulesetId': rulesetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Ruleset;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get ruleset
     * Retrieve the specified ruleset.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} rulesetId The ID of the ruleset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Ruleset}
     */
    getRuleset(applicationId, campaignId, rulesetId) {
      return this.getRulesetWithHttpInfo(applicationId, campaignId, rulesetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List campaign rulesets
     * List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2006} and HTTP response
     */
    getRulesetsWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getRulesets");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getRulesets");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List campaign rulesets
     * List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2006}
     */
    getRulesets(applicationId, campaignId, opts) {
      return this.getRulesetsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user
     * Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
     * @param {Number} userId The ID of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/User} and HTTP response
     */
    getUserWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v1/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get user
     * Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
     * @param {Number} userId The ID of the user.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/User}
     */
    getUser(userId) {
      return this.getUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List users in account
     * Retrieve all users in your account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20037} and HTTP response
     */
    getUsersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20037;
      return this.apiClient.callApi(
        '/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List users in account
     * Retrieve all users in your account. 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20037}
     */
    getUsers(opts) {
      return this.getUsersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get webhook
     * Returns a webhook by its id.
     * @param {Number} webhookId The ID of the webhook. You can find the ID in the Campaign Manager's URL when you display the details of the webhook in **Account** > **Webhooks**. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Webhook} and HTTP response
     */
    getWebhookWithHttpInfo(webhookId) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getWebhook");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v1/webhooks/{webhookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get webhook
     * Returns a webhook by its id.
     * @param {Number} webhookId The ID of the webhook. You can find the ID in the Campaign Manager's URL when you display the details of the webhook in **Account** > **Webhooks**. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Webhook}
     */
    getWebhook(webhookId) {
      return this.getWebhookWithHttpInfo(webhookId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhook activation log entries
     * Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.integrationRequestUuid] Filter results by integration request UUID.
     * @param {Number=} [opts.webhookId] Filter results by Webhook.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20034} and HTTP response
     */
    getWebhookActivationLogsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'integrationRequestUuid': opts['integrationRequestUuid'],
        'webhookId': opts['webhookId'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20034;
      return this.apiClient.callApi(
        '/v1/webhook_activation_logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhook activation log entries
     * Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.integrationRequestUuid] Filter results by integration request UUID.
     * @param {Number=} [opts.webhookId] Filter results by Webhook.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {Date=} [opts.createdBefore] Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20034}
     */
    getWebhookActivationLogs(opts) {
      return this.getWebhookActivationLogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhook log entries
     * Retrieve all webhook log entries.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.webhookId] Filter results by Webhook.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {String=} [opts.requestUuid] Filter results by request UUID.
     * @param {Date=} [opts.createdBefore] Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20035} and HTTP response
     */
    getWebhookLogsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'status': opts['status'],
        'webhookId': opts['webhookId'],
        'applicationId': opts['applicationId'],
        'campaignId': opts['campaignId'],
        'requestUuid': opts['requestUuid'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20035;
      return this.apiClient.callApi(
        '/v1/webhook_logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhook log entries
     * Retrieve all webhook log entries.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {module:model/String=} [opts.status] Filter results by HTTP status codes.
     * @param {Number=} [opts.webhookId] Filter results by Webhook.
     * @param {Number=} [opts.applicationId] Filter results by Application ID.
     * @param {Number=} [opts.campaignId] Filter results by campaign.
     * @param {String=} [opts.requestUuid] Filter results by request UUID.
     * @param {Date=} [opts.createdBefore] Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20035}
     */
    getWebhookLogs(opts) {
      return this.getWebhookLogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List webhooks
     * List all webhooks.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.applicationIds] Filter by one or more application IDs separated by a comma.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20033} and HTTP response
     */
    getWebhooksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'applicationIds': opts['applicationIds'],
        'sort': opts['sort'],
        'pageSize': opts['pageSize'],
        'skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;
      return this.apiClient.callApi(
        '/v1/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List webhooks
     * List all webhooks.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.applicationIds] Filter by one or more application IDs separated by a comma.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20033}
     */
    getWebhooks(opts) {
      return this.getWebhooksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import data in existing account-level collection
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - `item`: the values in your collection.  A collection is limited to 500,000 items.  Example:  ``` item Addidas Nike Asics ```  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importAccountCollectionWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling importAccountCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import data in existing account-level collection
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - `item`: the values in your collection.  A collection is limited to 500,000 items.  Example:  ``` item Addidas Nike Asics ```  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importAccountCollection(collectionId, opts) {
      return this.importAccountCollectionWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import allowed values for attribute
     * Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - `item` (required): the values in your allowed list, for example a list of SKU's.  An allowed list is limited to 500,000 items.  Example:  ```text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 ``` 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importAllowedListWithHttpInfo(attributeId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling importAllowedList");
      }

      let pathParams = {
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}/allowed_list/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import allowed values for attribute
     * Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - `item` (required): the values in your allowed list, for example a list of SKU's.  An allowed list is limited to 500,000 items.  Example:  ```text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 ``` 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importAllowedList(attributeId, opts) {
      return this.importAllowedListWithHttpInfo(attributeId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import data in existing collection
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - `item`: the values in your collection.  A collection is limited to 500,000 items.  Example:  ``` item Addidas Nike Asics ```  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importCollectionWithHttpInfo(applicationId, campaignId, collectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling importCollection");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling importCollection");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling importCollection");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import data in existing collection
     * Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - `item`: the values in your collection.  A collection is limited to 500,000 items.  Example:  ``` item Addidas Nike Asics ```  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importCollection(applicationId, campaignId, collectionId, opts) {
      return this.importCollectionWithHttpInfo(applicationId, campaignId, collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import coupons
     * Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - `value` (required): The coupon code. - `expirydate`: The end date in RFC3339 of the code redemption period. - `startdate`: The start date in RFC3339 of the code redemption period. - `recipientintegrationid`: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - `limitval`: The maximum number of redemptions of this code. For unlimited redemptions, use `0`. Defaults to `1` when not provided. - `discountlimit`: The total discount value that the code can give. This is typically used to represent a gift card value. - `attributes`: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `category` associated to the coupon entity, set it with `\"{\"\"category\"\": \"\"10_off\"\"}\"`.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text \"value\",\"expirydate\",\"startdate\",\"recipientintegrationid\",\"limitval\",\"attributes\",\"discountlimit\" COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\"{\"\"Category\"\": \"\"10_off\"\"}\",2.4 ```  Once imported, you can find the `batchId` in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importCouponsWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling importCoupons");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling importCoupons");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import coupons
     * Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - `value` (required): The coupon code. - `expirydate`: The end date in RFC3339 of the code redemption period. - `startdate`: The start date in RFC3339 of the code redemption period. - `recipientintegrationid`: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - `limitval`: The maximum number of redemptions of this code. For unlimited redemptions, use `0`. Defaults to `1` when not provided. - `discountlimit`: The total discount value that the code can give. This is typically used to represent a gift card value. - `attributes`: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `category` associated to the coupon entity, set it with `\"{\"\"category\"\": \"\"10_off\"\"}\"`.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text \"value\",\"expirydate\",\"startdate\",\"recipientintegrationid\",\"limitval\",\"attributes\",\"discountlimit\" COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\"{\"\"Category\"\": \"\"10_off\"\"}\",2.4 ```  Once imported, you can find the `batchId` in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importCoupons(applicationId, campaignId, opts) {
      return this.importCouponsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import loyalty cards
     * Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - `identifier` (required): The alphanumeric identifier of the loyalty card. - `state` (required): The state of the loyalty card. It can be `active` or `inactive`. - `customerprofileids` (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA ``` 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importLoyaltyCardsWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling importLoyaltyCards");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/import_cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import loyalty cards
     * Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - `identifier` (required): The alphanumeric identifier of the loyalty card. - `state` (required): The state of the loyalty card. It can be `active` or `inactive`. - `customerprofileids` (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA ``` 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importLoyaltyCards(loyaltyProgramId, opts) {
      return this.importLoyaltyCardsWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import loyalty points
     * Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - `customerprofileid` (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - `identifier` (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - `amount`: The amount of points to award to the customer profile. - `startdate`: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are `active`. - `expirydate`: The latest date when the points can be redeemed. After this date, the points are `expired`. - `subledgerid` (optional): The ID of the subledger that should received the points. - `reason` (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for `startdate`. If `startdate` matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for `startdate` is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  ```text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement ```  **Example for card-based programs:**  ```text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement ``` 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importLoyaltyPointsWithHttpInfo(loyaltyProgramId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling importLoyaltyPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/import_points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import loyalty points
     * Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - `customerprofileid` (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - `identifier` (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - `amount`: The amount of points to award to the customer profile. - `startdate`: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are `active`. - `expirydate`: The latest date when the points can be redeemed. After this date, the points are `expired`. - `subledgerid` (optional): The ID of the subledger that should received the points. - `reason` (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for `startdate`. If `startdate` matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for `startdate` is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  ```text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement ```  **Example for card-based programs:**  ```text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement ``` 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importLoyaltyPoints(loyaltyProgramId, opts) {
      return this.importLoyaltyPointsWithHttpInfo(loyaltyProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import giveaway codes into a giveaway pool
     * Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - `code` (required): the code of your giveaway, for instance, a gift card redemption code. - `startdate`:  the start date in RFC3339 of the code redemption period. - `enddate`: the last date in RFC3339 of the code redemption period. - `attributes`: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `provider` associated to the giveaway entity, set it with `\"{\"\"provider\"\": \"\"myPartnerCompany\"\"}\"`.  The `startdate` and `enddate` have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Amazon\"\"}\" GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Amazon\"\"}\" GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Aliexpress\"\"}\" ``` 
     * @param {Number} poolId The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importPoolGiveawaysWithHttpInfo(poolId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'poolId' is set
      if (poolId === undefined || poolId === null) {
        throw new Error("Missing the required parameter 'poolId' when calling importPoolGiveaways");
      }

      let pathParams = {
        'poolId': poolId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/giveaways/pools/{poolId}/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import giveaway codes into a giveaway pool
     * Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - `code` (required): the code of your giveaway, for instance, a gift card redemption code. - `startdate`:  the start date in RFC3339 of the code redemption period. - `enddate`: the last date in RFC3339 of the code redemption period. - `attributes`: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `provider` associated to the giveaway entity, set it with `\"{\"\"provider\"\": \"\"myPartnerCompany\"\"}\"`.  The `startdate` and `enddate` have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Amazon\"\"}\" GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Amazon\"\"}\" GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\"{\"\"provider\"\": \"\"Aliexpress\"\"}\" ``` 
     * @param {Number} poolId The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importPoolGiveaways(poolId, opts) {
      return this.importPoolGiveawaysWithHttpInfo(poolId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import referrals
     * Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - `code` (required): The referral code. - `advocateprofileintegrationid` (required): The profile ID of the advocate. - `startdate`: The start date in RFC3339 of the code redemption period. - `expirydate`: The end date in RFC3339 of the code redemption period. - `limitval`: The maximum number of redemptions of this code. Defaults to `1` when left blank. - `attributes`: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `category` associated to the referral entity, set it with `\"{\"\"category\"\": \"\"10_off\"\"}\"`.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\"{\"\"my_attribute\"\": \"\"10_off\"\"}\" REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\"{\"\"my_attribute\"\": \"\"20_off\"\"}\" ``` 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModelImport} and HTTP response
     */
    importReferralsWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling importReferrals");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling importReferrals");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'upFile': opts['upFile']
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelImport;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Import referrals
     * Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - `code` (required): The referral code. - `advocateprofileintegrationid` (required): The profile ID of the advocate. - `startdate`: The start date in RFC3339 of the code redemption period. - `expirydate`: The end date in RFC3339 of the code redemption period. - `limitval`: The maximum number of redemptions of this code. Defaults to `1` when left blank. - `attributes`: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called `category` associated to the referral entity, set it with `\"{\"\"category\"\": \"\"10_off\"\"}\"`.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  ```text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\"{\"\"my_attribute\"\": \"\"10_off\"\"}\" REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\"{\"\"my_attribute\"\": \"\"20_off\"\"}\" ``` 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {String=} [opts.upFile] The file with the information about the data that should be imported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModelImport}
     */
    importReferrals(applicationId, campaignId, opts) {
      return this.importReferralsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List collections in account
     * List collections in account.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20015} and HTTP response
     */
    listAccountCollectionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'withTotalResultSize': opts['withTotalResultSize'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;
      return this.apiClient.callApi(
        '/v1/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List collections in account
     * List collections in account.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20015}
     */
    listAccountCollections(opts) {
      return this.listAccountCollectionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List collections
     * List collections in the campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    listCollectionsWithHttpInfo(applicationId, campaignId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listCollections");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling listCollections");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'withTotalResultSize': opts['withTotalResultSize'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List collections
     * List collections in the campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    listCollections(applicationId, campaignId, opts) {
      return this.listCollectionsWithHttpInfo(applicationId, campaignId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List collections in application
     * List collections from all campaigns in the Application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse20017} and HTTP response
     */
    listCollectionsInApplicationWithHttpInfo(applicationId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listCollectionsInApplication");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'withTotalResultSize': opts['withTotalResultSize'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List collections in application
     * List collections from all campaigns in the Application.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {Boolean=} [opts.withTotalResultSize] When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When `true`: `hasMore` is true when there is a next page. `totalResultSize` is always zero. - When `false`: `hasMore` is always false. `totalResultSize` contains the total number of results for this query. 
     * @param {String=} [opts.name] Filter by the name of the Collection.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse20017}
     */
    listCollectionsInApplication(applicationId, opts) {
      return this.listCollectionsInApplicationWithHttpInfo(applicationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create notification about added or deducted loyalty points
     * Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {module:model/NewBaseNotification} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseNotification} and HTTP response
     */
    postAddedDeductedPointsNotificationWithHttpInfo(loyaltyProgramId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling postAddedDeductedPointsNotification");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAddedDeductedPointsNotification");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseNotification;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/notifications/added_deducted_points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create notification about added or deducted loyalty points
     * Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {module:model/NewBaseNotification} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseNotification}
     */
    postAddedDeductedPointsNotification(loyaltyProgramId, body) {
      return this.postAddedDeductedPointsNotificationWithHttpInfo(loyaltyProgramId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create strikethrough notification
     * Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewBaseNotification} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BaseNotification} and HTTP response
     */
    postCatalogsStrikethroughNotificationWithHttpInfo(applicationId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling postCatalogsStrikethroughNotification");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCatalogsStrikethroughNotification");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BaseNotification;
      return this.apiClient.callApi(
        '/v1/catalogs/{applicationId}/notifications/strikethrough', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create strikethrough notification
     * Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {module:model/NewBaseNotification} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BaseNotification}
     */
    postCatalogsStrikethroughNotification(applicationId, body) {
      return this.postCatalogsStrikethroughNotificationWithHttpInfo(applicationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deduct points from customer profile
     * Deduct points from the specified loyalty program and specified customer profile.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {module:model/DeductLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling removeLoyaltyPoints");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling removeLoyaltyPoints");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeLoyaltyPoints");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/profile/{integrationId}/deduct_points', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deduct points from customer profile
     * Deduct points from the specified loyalty program and specified customer profile.  To get the `integrationId` of the profile from a `sessionId`, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
     * @param {String} loyaltyProgramId The identifier for the loyalty program.
     * @param {String} integrationId The identifier of the profile.
     * @param {module:model/DeductLoyaltyPoints} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeLoyaltyPoints(loyaltyProgramId, integrationId, body) {
      return this.removeLoyaltyPointsWithHttpInfo(loyaltyProgramId, integrationId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param {module:model/NewPassword} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewPassword} and HTTP response
     */
    resetPasswordWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewPassword;
      return this.apiClient.callApi(
        '/v1/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reset password
     * Consumes the supplied password reset token and updates the password for the associated account. 
     * @param {module:model/NewPassword} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewPassword}
     */
    resetPassword(body) {
      return this.resetPasswordWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List coupons that match the given attributes (without total count)
     * List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    searchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedApplicationWideWithoutTotalCount");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchCouponsAdvancedApplicationWideWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'batchId': opts['batchId'],
        'exactMatch': opts['exactMatch'],
        'campaignState': opts['campaignState']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/coupons_search_advanced/no_total', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List coupons that match the given attributes (without total count)
     * List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Object} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {module:model/String=} [opts.campaignState] Filter results by the state of the campaign.  - `enabled`: Campaigns that are scheduled, running (activated), or expired. - `running`: Campaigns that are running (activated). - `disabled`: Campaigns that are disabled. - `expired`: Campaigns that are expired. - `archived`: Campaigns that are archived. - `draft`: Campaigns that are drafts. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    searchCouponsAdvancedApplicationWideWithoutTotalCount(applicationId, body, opts) {
      return this.searchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List coupons that match the given attributes in campaign (without total count)
     * List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2008} and HTTP response
     */
    searchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling searchCouponsAdvancedWithoutTotalCount");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling searchCouponsAdvancedWithoutTotalCount");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling searchCouponsAdvancedWithoutTotalCount");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'skip': opts['skip'],
        'sort': opts['sort'],
        'value': opts['value'],
        'createdBefore': opts['createdBefore'],
        'createdAfter': opts['createdAfter'],
        'valid': opts['valid'],
        'usable': opts['usable'],
        'referralId': opts['referralId'],
        'recipientIntegrationId': opts['recipientIntegrationId'],
        'exactMatch': opts['exactMatch'],
        'batchId': opts['batchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List coupons that match the given attributes in campaign (without total count)
     * List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Object} body body
     * @param {Object} [opts] Optional parameters
     * @param {Number=} [opts.pageSize] The number of items in this response. (default to 1000)
     * @param {Number=} [opts.skip] Skips the given number of items when paging through large result sets.
     * @param {String=} [opts.sort] The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with `-`.  **Note:** This parameter works only with numeric fields. 
     * @param {String=} [opts.value] Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
     * @param {Date=} [opts.createdBefore] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {Date=} [opts.createdAfter] Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
     * @param {module:model/String=} [opts.valid] Either \"expired\", \"validNow\", or \"validFuture\". The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
     * @param {module:model/String=} [opts.usable] Either \"true\" or \"false\". If \"true\", only coupons where `usageCounter < usageLimit` will be returned, \"false\" will return only coupons where `usageCounter >= usageLimit`. 
     * @param {Number=} [opts.referralId] Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
     * @param {String=} [opts.recipientIntegrationId] Filter results by match with a profile id specified in the coupon's RecipientIntegrationId field
     * @param {Boolean=} [opts.exactMatch] Filter results to an exact case-insensitive matching against the coupon code (default to false)
     * @param {String=} [opts.batchId] Filter results by batches of coupons
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2008}
     */
    searchCouponsAdvancedWithoutTotalCount(applicationId, campaignId, body, opts) {
      return this.searchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Transfer card data
     * Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/TransferLoyaltyCard} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    transferLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling transferLoyaltyCard");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling transferLoyaltyCard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling transferLoyaltyCard");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}/transfer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Transfer card data
     * Transfer loyalty card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/TransferLoyaltyCard} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    transferLoyaltyCard(loyaltyProgramId, loyaltyCardId, body) {
      return this.transferLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update account-level collection
     * Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {module:model/UpdateCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    updateAccountCollectionWithHttpInfo(collectionId, body) {
      let postBody = body;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateAccountCollection");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAccountCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/collections/{collectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update account-level collection
     * Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {module:model/UpdateCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    updateAccountCollection(collectionId, body) {
      return this.updateAccountCollectionWithHttpInfo(collectionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update additional cost
     * Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
     * @param {Number} additionalCostId The ID of the additional cost. You can find the ID the the Campaign Manager's URL when you display the details of the cost in **Account** > **Tools** > **Additional costs**. 
     * @param {module:model/NewAdditionalCost} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountAdditionalCost} and HTTP response
     */
    updateAdditionalCostWithHttpInfo(additionalCostId, body) {
      let postBody = body;
      // verify the required parameter 'additionalCostId' is set
      if (additionalCostId === undefined || additionalCostId === null) {
        throw new Error("Missing the required parameter 'additionalCostId' when calling updateAdditionalCost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAdditionalCost");
      }

      let pathParams = {
        'additionalCostId': additionalCostId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountAdditionalCost;
      return this.apiClient.callApi(
        '/v1/additional_costs/{additionalCostId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update additional cost
     * Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
     * @param {Number} additionalCostId The ID of the additional cost. You can find the ID the the Campaign Manager's URL when you display the details of the cost in **Account** > **Tools** > **Additional costs**. 
     * @param {module:model/NewAdditionalCost} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountAdditionalCost}
     */
    updateAdditionalCost(additionalCostId, body) {
      return this.updateAdditionalCostWithHttpInfo(additionalCostId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update custom attribute
     * Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the `type` or `name` property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @param {module:model/NewAttribute} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Attribute} and HTTP response
     */
    updateAttributeWithHttpInfo(attributeId, body) {
      let postBody = body;
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling updateAttribute");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttribute");
      }

      let pathParams = {
        'attributeId': attributeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Attribute;
      return this.apiClient.callApi(
        '/v1/attributes/{attributeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update custom attribute
     * Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the `type` or `name` property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
     * @param {Number} attributeId The ID of the attribute. You can find the ID in the Campaign Manager's URL when you display the details of an attribute in **Account** > **Tools** > **Attributes**.
     * @param {module:model/NewAttribute} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Attribute}
     */
    updateAttribute(attributeId, body) {
      return this.updateAttributeWithHttpInfo(attributeId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update campaign
     * Update the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/UpdateCampaign} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Campaign} and HTTP response
     */
    updateCampaignWithHttpInfo(applicationId, campaignId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaign");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCampaign");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Campaign;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update campaign
     * Update the given campaign.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/UpdateCampaign} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Campaign}
     */
    updateCampaign(applicationId, campaignId, body) {
      return this.updateCampaignWithHttpInfo(applicationId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update collection description
     * Edit the description of the collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {module:model/UpdateCampaignCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Collection} and HTTP response
     */
    updateCollectionWithHttpInfo(applicationId, campaignId, collectionId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCollection");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCollection");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateCollection");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCollection");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/collections/{collectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update collection description
     * Edit the description of the collection.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {Number} collectionId The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
     * @param {module:model/UpdateCampaignCollection} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Collection}
     */
    updateCollection(applicationId, campaignId, collectionId, body) {
      return this.updateCollectionWithHttpInfo(applicationId, campaignId, collectionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update coupon
     * Update the specified coupon.  <div class=\"redoc-section\">   <p class=\"title\">Important</p>    <p>With this PUT endpoint only, any property you do not explicitly set in your request   will be set to <code>null</code>.</p>  </div> 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} couponId The internal ID of the coupon code. You can find this value in the `id` property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
     * @param {module:model/UpdateCoupon} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Coupon} and HTTP response
     */
    updateCouponWithHttpInfo(applicationId, campaignId, couponId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCoupon");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCoupon");
      }
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling updateCoupon");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCoupon");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'couponId': couponId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Coupon;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update coupon
     * Update the specified coupon.  <div class=\"redoc-section\">   <p class=\"title\">Important</p>    <p>With this PUT endpoint only, any property you do not explicitly set in your request   will be set to <code>null</code>.</p>  </div> 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} couponId The internal ID of the coupon code. You can find this value in the `id` property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
     * @param {module:model/UpdateCoupon} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Coupon}
     */
    updateCoupon(applicationId, campaignId, couponId, body) {
      return this.updateCouponWithHttpInfo(applicationId, campaignId, couponId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update coupons
     * Update all coupons, or a specific batch of coupons, in a campaign. You can find the `batchId` in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  <div class=\"redoc-section\">   <p class=\"title\">Important</p>    <ul>     <li>Only send sequential requests to this endpoint.</li>     <li>Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.</li>   </ul>  </div>  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/UpdateCouponBatch} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateCouponBatchWithHttpInfo(applicationId, campaignId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCouponBatch");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCouponBatch");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCouponBatch");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/coupons', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update coupons
     * Update all coupons, or a specific batch of coupons, in a campaign. You can find the `batchId` in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  <div class=\"redoc-section\">   <p class=\"title\">Important</p>    <ul>     <li>Only send sequential requests to this endpoint.</li>     <li>Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.</li>   </ul>  </div>  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {module:model/UpdateCouponBatch} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateCouponBatch(applicationId, campaignId, body) {
      return this.updateCouponBatchWithHttpInfo(applicationId, campaignId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update loyalty card status
     * Update the status of the given loyalty card. A card can be _active_ or _inactive_.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/UpdateLoyaltyCard} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCard} and HTTP response
     */
    updateLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body) {
      let postBody = body;
      // verify the required parameter 'loyaltyProgramId' is set
      if (loyaltyProgramId === undefined || loyaltyProgramId === null) {
        throw new Error("Missing the required parameter 'loyaltyProgramId' when calling updateLoyaltyCard");
      }
      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling updateLoyaltyCard");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateLoyaltyCard");
      }

      let pathParams = {
        'loyaltyProgramId': loyaltyProgramId,
        'loyaltyCardId': loyaltyCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltyCard;
      return this.apiClient.callApi(
        '/v1/loyalty_programs/{loyaltyProgramId}/cards/{loyaltyCardId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update loyalty card status
     * Update the status of the given loyalty card. A card can be _active_ or _inactive_.
     * @param {Number} loyaltyProgramId Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
     * @param {String} loyaltyCardId Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
     * @param {module:model/UpdateLoyaltyCard} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCard}
     */
    updateLoyaltyCard(loyaltyProgramId, loyaltyCardId, body) {
      return this.updateLoyaltyCardWithHttpInfo(loyaltyProgramId, loyaltyCardId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update notification about campaign-related changes
     * Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @param {module:model/NewNotificationWebhook} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationWebhook} and HTTP response
     */
    updateNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateNotificationWebhook");
      }
      // verify the required parameter 'notificationWebhookId' is set
      if (notificationWebhookId === undefined || notificationWebhookId === null) {
        throw new Error("Missing the required parameter 'notificationWebhookId' when calling updateNotificationWebhook");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNotificationWebhook");
      }

      let pathParams = {
        'applicationId': applicationId,
        'notificationWebhookId': notificationWebhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationWebhook;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/notification_webhooks/{notificationWebhookId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update notification about campaign-related changes
     * Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} notificationWebhookId The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
     * @param {module:model/NewNotificationWebhook} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationWebhook}
     */
    updateNotificationWebhook(applicationId, notificationWebhookId, body) {
      return this.updateNotificationWebhookWithHttpInfo(applicationId, notificationWebhookId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update referral
     * Update the specified referral.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} referralId The ID of the referral code.
     * @param {module:model/UpdateReferral} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Referral} and HTTP response
     */
    updateReferralWithHttpInfo(applicationId, campaignId, referralId, body) {
      let postBody = body;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateReferral");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateReferral");
      }
      // verify the required parameter 'referralId' is set
      if (referralId === undefined || referralId === null) {
        throw new Error("Missing the required parameter 'referralId' when calling updateReferral");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateReferral");
      }

      let pathParams = {
        'applicationId': applicationId,
        'campaignId': campaignId,
        'referralId': referralId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['management_key', 'manager_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Referral;
      return this.apiClient.callApi(
        '/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update referral
     * Update the specified referral.
     * @param {Number} applicationId The ID of the Application. It is displayed in your Talon.One deployment URL.
     * @param {Number} campaignId The ID of the campaign. It is displayed in your Talon.One deployment URL.
     * @param {String} referralId The ID of the referral code.
     * @param {module:model/UpdateReferral} body body
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Referral}
     */
    updateReferral(applicationId, campaignId, referralId, body) {
      return this.updateReferralWithHttpInfo(applicationId, campaignId, referralId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
