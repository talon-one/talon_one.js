/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddedDeductedPointsNotificationPolicy model module.
 * @module model/AddedDeductedPointsNotificationPolicy
 * @version 5.0.1
 */
class AddedDeductedPointsNotificationPolicy {
    /**
     * Constructs a new <code>AddedDeductedPointsNotificationPolicy</code>.
     * @alias module:model/AddedDeductedPointsNotificationPolicy
     * @param name {String} Notification name.
     * @param scopes {Array.<module:model/AddedDeductedPointsNotificationPolicy.ScopesEnum>} 
     */
    constructor(name, scopes) { 
        
        AddedDeductedPointsNotificationPolicy.initialize(this, name, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, scopes) { 
        obj['name'] = name;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>AddedDeductedPointsNotificationPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddedDeductedPointsNotificationPolicy} obj Optional instance to populate.
     * @return {module:model/AddedDeductedPointsNotificationPolicy} The populated <code>AddedDeductedPointsNotificationPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddedDeductedPointsNotificationPolicy();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Notification name.
 * @member {String} name
 */
AddedDeductedPointsNotificationPolicy.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/AddedDeductedPointsNotificationPolicy.ScopesEnum>} scopes
 */
AddedDeductedPointsNotificationPolicy.prototype['scopes'] = undefined;





/**
 * Allowed values for the <code>scopes</code> property.
 * @enum {String}
 * @readonly
 */
AddedDeductedPointsNotificationPolicy['ScopesEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "campaign_manager"
     * @const
     */
    "campaign_manager": "campaign_manager",

    /**
     * value: "management_api"
     * @const
     */
    "management_api": "management_api",

    /**
     * value: "rule_engine"
     * @const
     */
    "rule_engine": "rule_engine"
};



export default AddedDeductedPointsNotificationPolicy;

