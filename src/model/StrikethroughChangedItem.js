/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StrikethroughEffect from './StrikethroughEffect';

/**
 * The StrikethroughChangedItem model module.
 * @module model/StrikethroughChangedItem
 * @version 5.0.1
 */
class StrikethroughChangedItem {
    /**
     * Constructs a new <code>StrikethroughChangedItem</code>.
     * The information of affected items.
     * @alias module:model/StrikethroughChangedItem
     * @param id {Number} The ID of the event that triggered the strikethrough labeling.
     * @param catalogId {Number} The ID of the catalog that the changed item belongs to.
     * @param sku {String} The unique SKU of the changed item.
     * @param version {Number} The version of the changed item.
     * @param price {Number} The price of the changed item.
     * @param evaluatedAt {Date} The evaluation time of the changed item.
     */
    constructor(id, catalogId, sku, version, price, evaluatedAt) { 
        
        StrikethroughChangedItem.initialize(this, id, catalogId, sku, version, price, evaluatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, catalogId, sku, version, price, evaluatedAt) { 
        obj['id'] = id;
        obj['catalogId'] = catalogId;
        obj['sku'] = sku;
        obj['version'] = version;
        obj['price'] = price;
        obj['evaluatedAt'] = evaluatedAt;
    }

    /**
     * Constructs a <code>StrikethroughChangedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StrikethroughChangedItem} obj Optional instance to populate.
     * @return {module:model/StrikethroughChangedItem} The populated <code>StrikethroughChangedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StrikethroughChangedItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('catalogId')) {
                obj['catalogId'] = ApiClient.convertToType(data['catalogId'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('evaluatedAt')) {
                obj['evaluatedAt'] = ApiClient.convertToType(data['evaluatedAt'], 'Date');
            }
            if (data.hasOwnProperty('effects')) {
                obj['effects'] = ApiClient.convertToType(data['effects'], [StrikethroughEffect]);
            }
        }
        return obj;
    }


}

/**
 * The ID of the event that triggered the strikethrough labeling.
 * @member {Number} id
 */
StrikethroughChangedItem.prototype['id'] = undefined;

/**
 * The ID of the catalog that the changed item belongs to.
 * @member {Number} catalogId
 */
StrikethroughChangedItem.prototype['catalogId'] = undefined;

/**
 * The unique SKU of the changed item.
 * @member {String} sku
 */
StrikethroughChangedItem.prototype['sku'] = undefined;

/**
 * The version of the changed item.
 * @member {Number} version
 */
StrikethroughChangedItem.prototype['version'] = undefined;

/**
 * The price of the changed item.
 * @member {Number} price
 */
StrikethroughChangedItem.prototype['price'] = undefined;

/**
 * The evaluation time of the changed item.
 * @member {Date} evaluatedAt
 */
StrikethroughChangedItem.prototype['evaluatedAt'] = undefined;

/**
 * @member {Array.<module:model/StrikethroughEffect>} effects
 */
StrikethroughChangedItem.prototype['effects'] = undefined;






export default StrikethroughChangedItem;

