/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewReferralsForMultipleAdvocates model module.
 * @module model/NewReferralsForMultipleAdvocates
 * @version 4.4.0
 */
class NewReferralsForMultipleAdvocates {
    /**
     * Constructs a new <code>NewReferralsForMultipleAdvocates</code>.
     * 
     * @alias module:model/NewReferralsForMultipleAdvocates
     * @param usageLimit {Number} The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
     * @param campaignId {Number} The ID of the campaign from which the referral received the referral code.
     * @param advocateProfileIntegrationIds {Array.<String>} An array containing all the respective advocate profiles.
     */
    constructor(usageLimit, campaignId, advocateProfileIntegrationIds) { 
        
        NewReferralsForMultipleAdvocates.initialize(this, usageLimit, campaignId, advocateProfileIntegrationIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, usageLimit, campaignId, advocateProfileIntegrationIds) { 
        obj['usageLimit'] = usageLimit;
        obj['campaignId'] = campaignId;
        obj['advocateProfileIntegrationIds'] = advocateProfileIntegrationIds;
    }

    /**
     * Constructs a <code>NewReferralsForMultipleAdvocates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewReferralsForMultipleAdvocates} obj Optional instance to populate.
     * @return {module:model/NewReferralsForMultipleAdvocates} The populated <code>NewReferralsForMultipleAdvocates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewReferralsForMultipleAdvocates();

            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('usageLimit')) {
                obj['usageLimit'] = ApiClient.convertToType(data['usageLimit'], 'Number');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('advocateProfileIntegrationIds')) {
                obj['advocateProfileIntegrationIds'] = ApiClient.convertToType(data['advocateProfileIntegrationIds'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('validCharacters')) {
                obj['validCharacters'] = ApiClient.convertToType(data['validCharacters'], ['String']);
            }
            if (data.hasOwnProperty('referralPattern')) {
                obj['referralPattern'] = ApiClient.convertToType(data['referralPattern'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Timestamp at which point the referral code becomes valid.
 * @member {Date} startDate
 */
NewReferralsForMultipleAdvocates.prototype['startDate'] = undefined;

/**
 * Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.
 * @member {Date} expiryDate
 */
NewReferralsForMultipleAdvocates.prototype['expiryDate'] = undefined;

/**
 * The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
 * @member {Number} usageLimit
 */
NewReferralsForMultipleAdvocates.prototype['usageLimit'] = undefined;

/**
 * The ID of the campaign from which the referral received the referral code.
 * @member {Number} campaignId
 */
NewReferralsForMultipleAdvocates.prototype['campaignId'] = undefined;

/**
 * An array containing all the respective advocate profiles.
 * @member {Array.<String>} advocateProfileIntegrationIds
 */
NewReferralsForMultipleAdvocates.prototype['advocateProfileIntegrationIds'] = undefined;

/**
 * Arbitrary properties associated with this item.
 * @member {Object} attributes
 */
NewReferralsForMultipleAdvocates.prototype['attributes'] = undefined;

/**
 * Set of characters to be used when generating random part of code. Defaults to [A-Z, 0-9] (in terms of RegExp).
 * @member {Array.<String>} validCharacters
 */
NewReferralsForMultipleAdvocates.prototype['validCharacters'] = undefined;

/**
 * The pattern that will be used to generate referrals. The character `#` acts as a placeholder and will be replaced by a random character from the `validCharacters` set. 
 * @member {String} referralPattern
 */
NewReferralsForMultipleAdvocates.prototype['referralPattern'] = undefined;






export default NewReferralsForMultipleAdvocates;

