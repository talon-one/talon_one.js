/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 12.0.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     * @param id {Number} Internal ID of this entity.
     * @param created {Date} The time this entity was created.
     * @param modified {Date} The time this entity was last modified.
     * @param email {String} The email address associated with the user profile.
     * @param accountId {Number} The ID of the account that owns this entity.
     * @param name {String} Name of the user.
     * @param state {module:model/User.StateEnum} State of the user.
     * @param inviteToken {String} Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is `null`. 
     * @param policy {Object} Access level of the user.
     */
    constructor(id, created, modified, email, accountId, name, state, inviteToken, policy) { 
        
        User.initialize(this, id, created, modified, email, accountId, name, state, inviteToken, policy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, modified, email, accountId, name, state, inviteToken, policy) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['modified'] = modified;
        obj['email'] = email;
        obj['accountId'] = accountId;
        obj['name'] = name;
        obj['state'] = state;
        obj['inviteToken'] = inviteToken;
        obj['policy'] = policy;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('inviteToken')) {
                obj['inviteToken'] = ApiClient.convertToType(data['inviteToken'], 'String');
            }
            if (data.hasOwnProperty('isAdmin')) {
                obj['isAdmin'] = ApiClient.convertToType(data['isAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], Object);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['Number']);
            }
            if (data.hasOwnProperty('authMethod')) {
                obj['authMethod'] = ApiClient.convertToType(data['authMethod'], 'String');
            }
            if (data.hasOwnProperty('applicationNotificationSubscriptions')) {
                obj['applicationNotificationSubscriptions'] = ApiClient.convertToType(data['applicationNotificationSubscriptions'], Object);
            }
            if (data.hasOwnProperty('lastSignedIn')) {
                obj['lastSignedIn'] = ApiClient.convertToType(data['lastSignedIn'], 'Date');
            }
            if (data.hasOwnProperty('lastAccessed')) {
                obj['lastAccessed'] = ApiClient.convertToType(data['lastAccessed'], 'Date');
            }
            if (data.hasOwnProperty('latestFeedTimestamp')) {
                obj['latestFeedTimestamp'] = ApiClient.convertToType(data['latestFeedTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('additionalAttributes')) {
                obj['additionalAttributes'] = ApiClient.convertToType(data['additionalAttributes'], Object);
            }
        }
        return obj;
    }


}

/**
 * Internal ID of this entity.
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * The time this entity was created.
 * @member {Date} created
 */
User.prototype['created'] = undefined;

/**
 * The time this entity was last modified.
 * @member {Date} modified
 */
User.prototype['modified'] = undefined;

/**
 * The email address associated with the user profile.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * The ID of the account that owns this entity.
 * @member {Number} accountId
 */
User.prototype['accountId'] = undefined;

/**
 * Name of the user.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * State of the user.
 * @member {module:model/User.StateEnum} state
 */
User.prototype['state'] = undefined;

/**
 * Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is `null`. 
 * @member {String} inviteToken
 */
User.prototype['inviteToken'] = undefined;

/**
 * Indicates whether the user is an `admin`.
 * @member {Boolean} isAdmin
 */
User.prototype['isAdmin'] = undefined;

/**
 * Access level of the user.
 * @member {Object} policy
 */
User.prototype['policy'] = undefined;

/**
 * A list of the IDs of the roles assigned to the user.
 * @member {Array.<Number>} roles
 */
User.prototype['roles'] = undefined;

/**
 * Authentication method for this user.
 * @member {String} authMethod
 */
User.prototype['authMethod'] = undefined;

/**
 * Application notifications that the user is subscribed to.
 * @member {Object} applicationNotificationSubscriptions
 */
User.prototype['applicationNotificationSubscriptions'] = undefined;

/**
 * Timestamp when the user last signed in to Talon.One.
 * @member {Date} lastSignedIn
 */
User.prototype['lastSignedIn'] = undefined;

/**
 * Timestamp of the user's last activity after signing in to Talon.One.
 * @member {Date} lastAccessed
 */
User.prototype['lastAccessed'] = undefined;

/**
 * Timestamp when the user was notified for feed.
 * @member {Date} latestFeedTimestamp
 */
User.prototype['latestFeedTimestamp'] = undefined;

/**
 * Additional user attributes, created and used by external identity providers.
 * @member {Object} additionalAttributes
 */
User.prototype['additionalAttributes'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
User['StateEnum'] = {

    /**
     * value: "invited"
     * @const
     */
    "invited": "invited",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "deactivated"
     * @const
     */
    "deactivated": "deactivated"
};



export default User;

