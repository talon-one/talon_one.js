/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IncreaseAchievementProgressEffectProps model module.
 * @module model/IncreaseAchievementProgressEffectProps
 * @version 12.0.0
 */
class IncreaseAchievementProgressEffectProps {
    /**
     * Constructs a new <code>IncreaseAchievementProgressEffectProps</code>.
     * The properties specific to the \&quot;increaseAchievementProgress\&quot; effect. This gets triggered whenever a validated rule contained an \&quot;increase customer progress\&quot; effect.
     * @alias module:model/IncreaseAchievementProgressEffectProps
     * @param achievementId {Number} The internal ID of the achievement.
     * @param achievementName {String} The name of the achievement.
     * @param delta {Number} The value by which the customer's current progress in the achievement is increased.
     * @param value {Number} The current progress of the customer in the achievement.
     * @param target {Number} The target value to complete the achievement.
     * @param isJustCompleted {Boolean} Indicates if the customer has completed the achievement in the current session.
     */
    constructor(achievementId, achievementName, delta, value, target, isJustCompleted) { 
        
        IncreaseAchievementProgressEffectProps.initialize(this, achievementId, achievementName, delta, value, target, isJustCompleted);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, achievementId, achievementName, delta, value, target, isJustCompleted) { 
        obj['achievementId'] = achievementId;
        obj['achievementName'] = achievementName;
        obj['delta'] = delta;
        obj['value'] = value;
        obj['target'] = target;
        obj['isJustCompleted'] = isJustCompleted;
    }

    /**
     * Constructs a <code>IncreaseAchievementProgressEffectProps</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncreaseAchievementProgressEffectProps} obj Optional instance to populate.
     * @return {module:model/IncreaseAchievementProgressEffectProps} The populated <code>IncreaseAchievementProgressEffectProps</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncreaseAchievementProgressEffectProps();

            if (data.hasOwnProperty('achievementId')) {
                obj['achievementId'] = ApiClient.convertToType(data['achievementId'], 'Number');
            }
            if (data.hasOwnProperty('achievementName')) {
                obj['achievementName'] = ApiClient.convertToType(data['achievementName'], 'String');
            }
            if (data.hasOwnProperty('progressTrackerId')) {
                obj['progressTrackerId'] = ApiClient.convertToType(data['progressTrackerId'], 'Number');
            }
            if (data.hasOwnProperty('delta')) {
                obj['delta'] = ApiClient.convertToType(data['delta'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'Number');
            }
            if (data.hasOwnProperty('isJustCompleted')) {
                obj['isJustCompleted'] = ApiClient.convertToType(data['isJustCompleted'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The internal ID of the achievement.
 * @member {Number} achievementId
 */
IncreaseAchievementProgressEffectProps.prototype['achievementId'] = undefined;

/**
 * The name of the achievement.
 * @member {String} achievementName
 */
IncreaseAchievementProgressEffectProps.prototype['achievementName'] = undefined;

/**
 * The internal ID of the achievement progress tracker.
 * @member {Number} progressTrackerId
 */
IncreaseAchievementProgressEffectProps.prototype['progressTrackerId'] = undefined;

/**
 * The value by which the customer's current progress in the achievement is increased.
 * @member {Number} delta
 */
IncreaseAchievementProgressEffectProps.prototype['delta'] = undefined;

/**
 * The current progress of the customer in the achievement.
 * @member {Number} value
 */
IncreaseAchievementProgressEffectProps.prototype['value'] = undefined;

/**
 * The target value to complete the achievement.
 * @member {Number} target
 */
IncreaseAchievementProgressEffectProps.prototype['target'] = undefined;

/**
 * Indicates if the customer has completed the achievement in the current session.
 * @member {Boolean} isJustCompleted
 */
IncreaseAchievementProgressEffectProps.prototype['isJustCompleted'] = undefined;






export default IncreaseAchievementProgressEffectProps;

