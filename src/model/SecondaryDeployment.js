/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecondaryDeployment model module.
 * @module model/SecondaryDeployment
 * @version .0
 */
class SecondaryDeployment {
    /**
     * Constructs a new <code>SecondaryDeployment</code>.
     * The record of the secondary deployment.
     * @alias module:model/SecondaryDeployment
     * @param id {Number} Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
     * @param name {String} The name of the deployment. Used as subdomain, e.g. experimental.your-company.europe-west1.talon.one
     * @param userId {Number} The ID of the user who created the deployment.
     * @param status {module:model/SecondaryDeployment.StatusEnum} The status of the deployment.
     * @param createdAt {Date} Timestamp when the deployment was created.
     */
    constructor(id, name, userId, status, createdAt) { 
        
        SecondaryDeployment.initialize(this, id, name, userId, status, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, userId, status, createdAt) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['userId'] = userId;
        obj['status'] = status;
        obj['createdAt'] = createdAt;
    }

    /**
     * Constructs a <code>SecondaryDeployment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecondaryDeployment} obj Optional instance to populate.
     * @return {module:model/SecondaryDeployment} The populated <code>SecondaryDeployment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecondaryDeployment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('activeAt')) {
                obj['activeAt'] = ApiClient.convertToType(data['activeAt'], 'Date');
            }
            if (data.hasOwnProperty('failedAt')) {
                obj['failedAt'] = ApiClient.convertToType(data['failedAt'], 'Date');
            }
            if (data.hasOwnProperty('deletedAt')) {
                obj['deletedAt'] = ApiClient.convertToType(data['deletedAt'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * Unique ID for this entity. Not to be confused with the Integration ID, which is set by your integration layer and used in most endpoints.
 * @member {Number} id
 */
SecondaryDeployment.prototype['id'] = undefined;

/**
 * The name of the deployment. Used as subdomain, e.g. experimental.your-company.europe-west1.talon.one
 * @member {String} name
 */
SecondaryDeployment.prototype['name'] = undefined;

/**
 * The ID of the user who created the deployment.
 * @member {Number} userId
 */
SecondaryDeployment.prototype['userId'] = undefined;

/**
 * The status of the deployment.
 * @member {module:model/SecondaryDeployment.StatusEnum} status
 */
SecondaryDeployment.prototype['status'] = undefined;

/**
 * Timestamp when the deployment was created.
 * @member {Date} createdAt
 */
SecondaryDeployment.prototype['createdAt'] = undefined;

/**
 * Timestamp when the deployment became active.
 * @member {Date} activeAt
 */
SecondaryDeployment.prototype['activeAt'] = undefined;

/**
 * Timestamp when the deployment failed.
 * @member {Date} failedAt
 */
SecondaryDeployment.prototype['failedAt'] = undefined;

/**
 * Timestamp when the deployment was deleted.
 * @member {Date} deletedAt
 */
SecondaryDeployment.prototype['deletedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SecondaryDeployment['StatusEnum'] = {

    /**
     * value: "created"
     * @const
     */
    "created": "created",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default SecondaryDeployment;

