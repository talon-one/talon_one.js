/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalyticsDataPoint from './AnalyticsDataPoint';

/**
 * The ApplicationAnalyticsDataPoint model module.
 * @module model/ApplicationAnalyticsDataPoint
 * @version 11.1.0
 */
class ApplicationAnalyticsDataPoint {
    /**
     * Constructs a new <code>ApplicationAnalyticsDataPoint</code>.
     * @alias module:model/ApplicationAnalyticsDataPoint
     * @param startTime {Date} The start of the aggregation time frame in UTC.
     * @param endTime {Date} The end of the aggregation time frame in UTC.
     */
    constructor(startTime, endTime) { 
        
        ApplicationAnalyticsDataPoint.initialize(this, startTime, endTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startTime, endTime) { 
        obj['startTime'] = startTime;
        obj['endTime'] = endTime;
    }

    /**
     * Constructs a <code>ApplicationAnalyticsDataPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationAnalyticsDataPoint} obj Optional instance to populate.
     * @return {module:model/ApplicationAnalyticsDataPoint} The populated <code>ApplicationAnalyticsDataPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationAnalyticsDataPoint();

            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('totalRevenue')) {
                obj['totalRevenue'] = AnalyticsDataPoint.constructFromObject(data['totalRevenue']);
            }
            if (data.hasOwnProperty('sessionsCount')) {
                obj['sessionsCount'] = AnalyticsDataPoint.constructFromObject(data['sessionsCount']);
            }
            if (data.hasOwnProperty('avgItemsPerSession')) {
                obj['avgItemsPerSession'] = AnalyticsDataPoint.constructFromObject(data['avgItemsPerSession']);
            }
            if (data.hasOwnProperty('avgSessionValue')) {
                obj['avgSessionValue'] = AnalyticsDataPoint.constructFromObject(data['avgSessionValue']);
            }
            if (data.hasOwnProperty('totalDiscounts')) {
                obj['totalDiscounts'] = ApiClient.convertToType(data['totalDiscounts'], 'Number');
            }
            if (data.hasOwnProperty('couponsCount')) {
                obj['couponsCount'] = ApiClient.convertToType(data['couponsCount'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The start of the aggregation time frame in UTC.
 * @member {Date} startTime
 */
ApplicationAnalyticsDataPoint.prototype['startTime'] = undefined;

/**
 * The end of the aggregation time frame in UTC.
 * @member {Date} endTime
 */
ApplicationAnalyticsDataPoint.prototype['endTime'] = undefined;

/**
 * @member {module:model/AnalyticsDataPoint} totalRevenue
 */
ApplicationAnalyticsDataPoint.prototype['totalRevenue'] = undefined;

/**
 * @member {module:model/AnalyticsDataPoint} sessionsCount
 */
ApplicationAnalyticsDataPoint.prototype['sessionsCount'] = undefined;

/**
 * @member {module:model/AnalyticsDataPoint} avgItemsPerSession
 */
ApplicationAnalyticsDataPoint.prototype['avgItemsPerSession'] = undefined;

/**
 * @member {module:model/AnalyticsDataPoint} avgSessionValue
 */
ApplicationAnalyticsDataPoint.prototype['avgSessionValue'] = undefined;

/**
 * The total value of discounts given for cart items in influenced sessions.
 * @member {Number} totalDiscounts
 */
ApplicationAnalyticsDataPoint.prototype['totalDiscounts'] = undefined;

/**
 * The number of times a coupon was successfully redeemed in influenced sessions.
 * @member {Number} couponsCount
 */
ApplicationAnalyticsDataPoint.prototype['couponsCount'] = undefined;






export default ApplicationAnalyticsDataPoint;

