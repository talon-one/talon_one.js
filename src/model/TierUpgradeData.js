/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TierUpgradeData model module.
 * @module model/TierUpgradeData
 * @version .0
 */
class TierUpgradeData {
    /**
     * Constructs a new <code>TierUpgradeData</code>.
     * @alias module:model/TierUpgradeData
     * @param customerProfileID {String} The integration ID of the customer profile whose tier was upgraded.
     * @param loyaltyProgramID {Number} The ID of the loyalty program.
     * @param subledgerID {String} The ID of the subledger, when applicable. If this field is empty, the main ledger is used.
     * @param currentTier {String} The name of the customer's current tier.
     * @param currentPoints {Number} The number of points the customer had at the time of tier upgrade.
     * @param tierExpirationDate {Date} The exact date and time the tier expires.
     * @param timestampOfTierChange {Date} The exact date and time the tier was changed.
     */
    constructor(customerProfileID, loyaltyProgramID, subledgerID, currentTier, currentPoints, tierExpirationDate, timestampOfTierChange) { 
        
        TierUpgradeData.initialize(this, customerProfileID, loyaltyProgramID, subledgerID, currentTier, currentPoints, tierExpirationDate, timestampOfTierChange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerProfileID, loyaltyProgramID, subledgerID, currentTier, currentPoints, tierExpirationDate, timestampOfTierChange) { 
        obj['CustomerProfileID'] = customerProfileID;
        obj['LoyaltyProgramID'] = loyaltyProgramID;
        obj['SubledgerID'] = subledgerID;
        obj['CurrentTier'] = currentTier;
        obj['CurrentPoints'] = currentPoints;
        obj['TierExpirationDate'] = tierExpirationDate;
        obj['TimestampOfTierChange'] = timestampOfTierChange;
    }

    /**
     * Constructs a <code>TierUpgradeData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TierUpgradeData} obj Optional instance to populate.
     * @return {module:model/TierUpgradeData} The populated <code>TierUpgradeData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TierUpgradeData();

            if (data.hasOwnProperty('CustomerProfileID')) {
                obj['CustomerProfileID'] = ApiClient.convertToType(data['CustomerProfileID'], 'String');
            }
            if (data.hasOwnProperty('LoyaltyProgramID')) {
                obj['LoyaltyProgramID'] = ApiClient.convertToType(data['LoyaltyProgramID'], 'Number');
            }
            if (data.hasOwnProperty('SubledgerID')) {
                obj['SubledgerID'] = ApiClient.convertToType(data['SubledgerID'], 'String');
            }
            if (data.hasOwnProperty('CurrentTier')) {
                obj['CurrentTier'] = ApiClient.convertToType(data['CurrentTier'], 'String');
            }
            if (data.hasOwnProperty('CurrentPoints')) {
                obj['CurrentPoints'] = ApiClient.convertToType(data['CurrentPoints'], 'Number');
            }
            if (data.hasOwnProperty('OldTier')) {
                obj['OldTier'] = ApiClient.convertToType(data['OldTier'], 'String');
            }
            if (data.hasOwnProperty('PointsRequiredToTheNextTier')) {
                obj['PointsRequiredToTheNextTier'] = ApiClient.convertToType(data['PointsRequiredToTheNextTier'], 'Number');
            }
            if (data.hasOwnProperty('NextTier')) {
                obj['NextTier'] = ApiClient.convertToType(data['NextTier'], 'String');
            }
            if (data.hasOwnProperty('TierExpirationDate')) {
                obj['TierExpirationDate'] = ApiClient.convertToType(data['TierExpirationDate'], 'Date');
            }
            if (data.hasOwnProperty('TimestampOfTierChange')) {
                obj['TimestampOfTierChange'] = ApiClient.convertToType(data['TimestampOfTierChange'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The integration ID of the customer profile whose tier was upgraded.
 * @member {String} CustomerProfileID
 */
TierUpgradeData.prototype['CustomerProfileID'] = undefined;

/**
 * The ID of the loyalty program.
 * @member {Number} LoyaltyProgramID
 */
TierUpgradeData.prototype['LoyaltyProgramID'] = undefined;

/**
 * The ID of the subledger, when applicable. If this field is empty, the main ledger is used.
 * @member {String} SubledgerID
 * @default ''
 */
TierUpgradeData.prototype['SubledgerID'] = '';

/**
 * The name of the customer's current tier.
 * @member {String} CurrentTier
 */
TierUpgradeData.prototype['CurrentTier'] = undefined;

/**
 * The number of points the customer had at the time of tier upgrade.
 * @member {Number} CurrentPoints
 */
TierUpgradeData.prototype['CurrentPoints'] = undefined;

/**
 * The name of the customer's previous tier.
 * @member {String} OldTier
 */
TierUpgradeData.prototype['OldTier'] = undefined;

/**
 * The number of points needed for a customer to reach the next tier.
 * @member {Number} PointsRequiredToTheNextTier
 */
TierUpgradeData.prototype['PointsRequiredToTheNextTier'] = undefined;

/**
 * The name of the customer's next tier.
 * @member {String} NextTier
 */
TierUpgradeData.prototype['NextTier'] = undefined;

/**
 * The exact date and time the tier expires.
 * @member {Date} TierExpirationDate
 */
TierUpgradeData.prototype['TierExpirationDate'] = undefined;

/**
 * The exact date and time the tier was changed.
 * @member {Date} TimestampOfTierChange
 */
TierUpgradeData.prototype['TimestampOfTierChange'] = undefined;






export default TierUpgradeData;

