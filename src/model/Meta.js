/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CouponRejectionReason', 'model/ReferralRejectionReason'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CouponRejectionReason'), require('./ReferralRejectionReason'));
  } else {
    // Browser globals (root is window)
    if (!root.TalonOne) {
      root.TalonOne = {};
    }
    root.TalonOne.Meta = factory(root.TalonOne.ApiClient, root.TalonOne.CouponRejectionReason, root.TalonOne.ReferralRejectionReason);
  }
}(this, function(ApiClient, CouponRejectionReason, ReferralRejectionReason) {
  'use strict';




  /**
   * The Meta model module.
   * @module model/Meta
   * @version 3.3.0
   */

  /**
   * Constructs a new <code>Meta</code>.
   * @alias module:model/Meta
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>Meta</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Meta} obj Optional instance to populate.
   * @return {module:model/Meta} The populated <code>Meta</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('campaigns')) {
        obj['campaigns'] = ApiClient.convertToType(data['campaigns'], Object);
      }
      if (data.hasOwnProperty('coupons')) {
        obj['coupons'] = ApiClient.convertToType(data['coupons'], Object);
      }
      if (data.hasOwnProperty('couponRejectionReason')) {
        obj['couponRejectionReason'] = CouponRejectionReason.constructFromObject(data['couponRejectionReason']);
      }
      if (data.hasOwnProperty('referralRejectionReason')) {
        obj['referralRejectionReason'] = ReferralRejectionReason.constructFromObject(data['referralRejectionReason']);
      }
      if (data.hasOwnProperty('warnings')) {
        obj['warnings'] = ApiClient.convertToType(data['warnings'], Object);
      }
    }
    return obj;
  }

  /**
   * Maps each evaluated campaign ID to a key-value list of that campaigns attributes. Campaigns without attributes will be omitted.
   * @member {Object} campaigns
   */
  exports.prototype['campaigns'] = undefined;
  /**
   * Maps the coupon value to a key-value list of that coupons attributes.
   * @member {Object} coupons
   */
  exports.prototype['coupons'] = undefined;
  /**
   * @member {module:model/CouponRejectionReason} couponRejectionReason
   */
  exports.prototype['couponRejectionReason'] = undefined;
  /**
   * @member {module:model/ReferralRejectionReason} referralRejectionReason
   */
  exports.prototype['referralRejectionReason'] = undefined;
  /**
   * @member {Object} warnings
   */
  exports.prototype['warnings'] = undefined;



  return exports;
}));


