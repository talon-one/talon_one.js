/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AchievementProgressWithDefinition model module.
 * @module model/AchievementProgressWithDefinition
 * @version .0
 */
class AchievementProgressWithDefinition {
    /**
     * Constructs a new <code>AchievementProgressWithDefinition</code>.
     * The current progress of the customer in the achievement.
     * @alias module:model/AchievementProgressWithDefinition
     * @param status {module:model/AchievementProgressWithDefinition.StatusEnum} The status of the achievement.
     * @param progress {Number} The current progress of the customer in the achievement.
     * @param achievementId {Number} The internal ID of the achievement.
     * @param name {String} The internal name of the achievement used in API requests. 
     * @param title {String} The display name of the achievement in the Campaign Manager.
     * @param description {String} The description of the achievement in the Campaign Manager.
     * @param campaignId {Number} The ID of the campaign the achievement belongs to.
     * @param achievementRecurrencePolicy {module:model/AchievementProgressWithDefinition.AchievementRecurrencePolicyEnum} The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again. - `on_completion`: When the customer progress status reaches `completed`, the achievement resets and becomes available again. 
     * @param achievementActivationPolicy {module:model/AchievementProgressWithDefinition.AchievementActivationPolicyEnum} The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule. 
     */
    constructor(status, progress, achievementId, name, title, description, campaignId, achievementRecurrencePolicy, achievementActivationPolicy) { 
        
        AchievementProgressWithDefinition.initialize(this, status, progress, achievementId, name, title, description, campaignId, achievementRecurrencePolicy, achievementActivationPolicy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, progress, achievementId, name, title, description, campaignId, achievementRecurrencePolicy, achievementActivationPolicy) { 
        obj['status'] = status;
        obj['progress'] = progress;
        obj['achievementId'] = achievementId;
        obj['name'] = name;
        obj['title'] = title;
        obj['description'] = description;
        obj['campaignId'] = campaignId;
        obj['achievementRecurrencePolicy'] = achievementRecurrencePolicy;
        obj['achievementActivationPolicy'] = achievementActivationPolicy;
    }

    /**
     * Constructs a <code>AchievementProgressWithDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AchievementProgressWithDefinition} obj Optional instance to populate.
     * @return {module:model/AchievementProgressWithDefinition} The populated <code>AchievementProgressWithDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AchievementProgressWithDefinition();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('completionDate')) {
                obj['completionDate'] = ApiClient.convertToType(data['completionDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('achievementId')) {
                obj['achievementId'] = ApiClient.convertToType(data['achievementId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'Number');
            }
            if (data.hasOwnProperty('achievementRecurrencePolicy')) {
                obj['achievementRecurrencePolicy'] = ApiClient.convertToType(data['achievementRecurrencePolicy'], 'String');
            }
            if (data.hasOwnProperty('achievementActivationPolicy')) {
                obj['achievementActivationPolicy'] = ApiClient.convertToType(data['achievementActivationPolicy'], 'String');
            }
            if (data.hasOwnProperty('achievementFixedStartDate')) {
                obj['achievementFixedStartDate'] = ApiClient.convertToType(data['achievementFixedStartDate'], 'Date');
            }
            if (data.hasOwnProperty('achievementEndDate')) {
                obj['achievementEndDate'] = ApiClient.convertToType(data['achievementEndDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The status of the achievement.
 * @member {module:model/AchievementProgressWithDefinition.StatusEnum} status
 */
AchievementProgressWithDefinition.prototype['status'] = undefined;

/**
 * The current progress of the customer in the achievement.
 * @member {Number} progress
 */
AchievementProgressWithDefinition.prototype['progress'] = undefined;

/**
 * Timestamp at which the customer started the achievement.
 * @member {Date} startDate
 */
AchievementProgressWithDefinition.prototype['startDate'] = undefined;

/**
 * Timestamp at which point the customer completed the achievement.
 * @member {Date} completionDate
 */
AchievementProgressWithDefinition.prototype['completionDate'] = undefined;

/**
 * Timestamp at which point the achievement ends and resets for the customer.
 * @member {Date} endDate
 */
AchievementProgressWithDefinition.prototype['endDate'] = undefined;

/**
 * The internal ID of the achievement.
 * @member {Number} achievementId
 */
AchievementProgressWithDefinition.prototype['achievementId'] = undefined;

/**
 * The internal name of the achievement used in API requests. 
 * @member {String} name
 */
AchievementProgressWithDefinition.prototype['name'] = undefined;

/**
 * The display name of the achievement in the Campaign Manager.
 * @member {String} title
 */
AchievementProgressWithDefinition.prototype['title'] = undefined;

/**
 * The description of the achievement in the Campaign Manager.
 * @member {String} description
 */
AchievementProgressWithDefinition.prototype['description'] = undefined;

/**
 * The ID of the campaign the achievement belongs to.
 * @member {Number} campaignId
 */
AchievementProgressWithDefinition.prototype['campaignId'] = undefined;

/**
 * The required number of actions or the transactional milestone to complete the achievement.
 * @member {Number} target
 */
AchievementProgressWithDefinition.prototype['target'] = undefined;

/**
 * The policy that determines if and how the achievement recurs. - `no_recurrence`: The achievement can be completed only once. - `on_expiration`: The achievement resets after it expires and becomes available again. - `on_completion`: When the customer progress status reaches `completed`, the achievement resets and becomes available again. 
 * @member {module:model/AchievementProgressWithDefinition.AchievementRecurrencePolicyEnum} achievementRecurrencePolicy
 */
AchievementProgressWithDefinition.prototype['achievementRecurrencePolicy'] = undefined;

/**
 * The policy that determines how the achievement starts, ends, or resets. - `user_action`: The achievement ends or resets relative to when the customer started the achievement. - `fixed_schedule`: The achievement starts, ends, or resets for all customers following a fixed schedule. 
 * @member {module:model/AchievementProgressWithDefinition.AchievementActivationPolicyEnum} achievementActivationPolicy
 */
AchievementProgressWithDefinition.prototype['achievementActivationPolicy'] = undefined;

/**
 * The achievement's start date when `achievementActivationPolicy` is equal to `fixed_schedule`.  **Note:** It is an RFC3339 timestamp string. 
 * @member {Date} achievementFixedStartDate
 */
AchievementProgressWithDefinition.prototype['achievementFixedStartDate'] = undefined;

/**
 * The achievement's end date. If defined, customers cannot participate in the achievement after this date.  **Note:** It is an RFC3339 timestamp string. 
 * @member {Date} achievementEndDate
 */
AchievementProgressWithDefinition.prototype['achievementEndDate'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AchievementProgressWithDefinition['StatusEnum'] = {

    /**
     * value: "inprogress"
     * @const
     */
    "inprogress": "inprogress",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "not_started"
     * @const
     */
    "not_started": "not_started"
};


/**
 * Allowed values for the <code>achievementRecurrencePolicy</code> property.
 * @enum {String}
 * @readonly
 */
AchievementProgressWithDefinition['AchievementRecurrencePolicyEnum'] = {

    /**
     * value: "no_recurrence"
     * @const
     */
    "no_recurrence": "no_recurrence",

    /**
     * value: "on_expiration"
     * @const
     */
    "on_expiration": "on_expiration",

    /**
     * value: "on_completion"
     * @const
     */
    "on_completion": "on_completion"
};


/**
 * Allowed values for the <code>achievementActivationPolicy</code> property.
 * @enum {String}
 * @readonly
 */
AchievementProgressWithDefinition['AchievementActivationPolicyEnum'] = {

    /**
     * value: "user_action"
     * @const
     */
    "user_action": "user_action",

    /**
     * value: "fixed_schedule"
     * @const
     */
    "fixed_schedule": "fixed_schedule"
};



export default AchievementProgressWithDefinition;

