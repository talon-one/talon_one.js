/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FunctionDef', 'model/SlotDef', 'model/TemplateDef'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FunctionDef'), require('./SlotDef'), require('./TemplateDef'));
  } else {
    // Browser globals (root is window)
    if (!root.TalonOne) {
      root.TalonOne = {};
    }
    root.TalonOne.Environment = factory(root.TalonOne.ApiClient, root.TalonOne.FunctionDef, root.TalonOne.SlotDef, root.TalonOne.TemplateDef);
  }
}(this, function(ApiClient, FunctionDef, SlotDef, TemplateDef) {
  'use strict';




  /**
   * The Environment model module.
   * @module model/Environment
   * @version 3.3.0
   */

  /**
   * Constructs a new <code>Environment</code>.
   * 
   * @alias module:model/Environment
   * @class
   * @param id {Number} Unique ID for this entity.
   * @param created {Date} The exact moment this entity was created.
   * @param applicationId {Number} The ID of the application that owns this entity.
   * @param slots {Array.<module:model/SlotDef>} The slots defined for this application.
   * @param functions {Array.<module:model/FunctionDef>} The functions defined for this application.
   * @param templates {Array.<module:model/TemplateDef>} The templates defined for this application.
   * @param variables {String} 
   */
  var exports = function(id, created, applicationId, slots, functions, templates, variables) {
    var _this = this;

    _this['id'] = id;
    _this['created'] = created;
    _this['applicationId'] = applicationId;
    _this['slots'] = slots;
    _this['functions'] = functions;
    _this['templates'] = templates;
    _this['variables'] = variables;
  };

  /**
   * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Environment} obj Optional instance to populate.
   * @return {module:model/Environment} The populated <code>Environment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('created')) {
        obj['created'] = ApiClient.convertToType(data['created'], 'Date');
      }
      if (data.hasOwnProperty('applicationId')) {
        obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'Number');
      }
      if (data.hasOwnProperty('slots')) {
        obj['slots'] = ApiClient.convertToType(data['slots'], [SlotDef]);
      }
      if (data.hasOwnProperty('functions')) {
        obj['functions'] = ApiClient.convertToType(data['functions'], [FunctionDef]);
      }
      if (data.hasOwnProperty('templates')) {
        obj['templates'] = ApiClient.convertToType(data['templates'], [TemplateDef]);
      }
      if (data.hasOwnProperty('variables')) {
        obj['variables'] = ApiClient.convertToType(data['variables'], 'String');
      }
    }
    return obj;
  }

  /**
   * Unique ID for this entity.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The exact moment this entity was created.
   * @member {Date} created
   */
  exports.prototype['created'] = undefined;
  /**
   * The ID of the application that owns this entity.
   * @member {Number} applicationId
   */
  exports.prototype['applicationId'] = undefined;
  /**
   * The slots defined for this application.
   * @member {Array.<module:model/SlotDef>} slots
   */
  exports.prototype['slots'] = undefined;
  /**
   * The functions defined for this application.
   * @member {Array.<module:model/FunctionDef>} functions
   */
  exports.prototype['functions'] = undefined;
  /**
   * The templates defined for this application.
   * @member {Array.<module:model/TemplateDef>} templates
   */
  exports.prototype['templates'] = undefined;
  /**
   * @member {String} variables
   */
  exports.prototype['variables'] = undefined;



  return exports;
}));


