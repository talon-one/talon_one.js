/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationListItem model module.
 * @module model/NotificationListItem
 * @version 7.0.0
 */
class NotificationListItem {
    /**
     * Constructs a new <code>NotificationListItem</code>.
     * @alias module:model/NotificationListItem
     * @param notificationId {Number} The ID of the notification.
     * @param notificationName {String} The name of the notification.
     * @param entityId {Number} The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program. 
     * @param enabled {Boolean} Indicates whether the notification is activated.
     */
    constructor(notificationId, notificationName, entityId, enabled) { 
        
        NotificationListItem.initialize(this, notificationId, notificationName, entityId, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, notificationId, notificationName, entityId, enabled) { 
        obj['notificationId'] = notificationId;
        obj['notificationName'] = notificationName;
        obj['entityId'] = entityId;
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>NotificationListItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationListItem} obj Optional instance to populate.
     * @return {module:model/NotificationListItem} The populated <code>NotificationListItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationListItem();

            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'Number');
            }
            if (data.hasOwnProperty('notificationName')) {
                obj['notificationName'] = ApiClient.convertToType(data['notificationName'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The ID of the notification.
 * @member {Number} notificationId
 */
NotificationListItem.prototype['notificationId'] = undefined;

/**
 * The name of the notification.
 * @member {String} notificationName
 */
NotificationListItem.prototype['notificationName'] = undefined;

/**
 * The ID of the entity to which this notification belongs. For example, in case of a loyalty notification, this value is the ID of the loyalty program. 
 * @member {Number} entityId
 */
NotificationListItem.prototype['entityId'] = undefined;

/**
 * Indicates whether the notification is activated.
 * @member {Boolean} enabled
 */
NotificationListItem.prototype['enabled'] = undefined;






export default NotificationListItem;

