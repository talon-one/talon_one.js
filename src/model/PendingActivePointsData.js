/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PendingActivePointsData model module.
 * @module model/PendingActivePointsData
 * @version .0
 */
class PendingActivePointsData {
    /**
     * Constructs a new <code>PendingActivePointsData</code>.
     * @alias module:model/PendingActivePointsData
     * @param loyaltyProgramID {Number} The ID of the loyalty program.
     * @param subledgerID {String} The ID of the subledger, when applicable. If this field is empty, the main ledger is used.
     * @param customerProfileID {String} The integration ID of the customer profile whose loyalty points are becoming active.
     * @param points {Number} The amount of pending loyalty points becoming active.
     */
    constructor(loyaltyProgramID, subledgerID, customerProfileID, points) { 
        
        PendingActivePointsData.initialize(this, loyaltyProgramID, subledgerID, customerProfileID, points);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loyaltyProgramID, subledgerID, customerProfileID, points) { 
        obj['LoyaltyProgramID'] = loyaltyProgramID;
        obj['SubledgerID'] = subledgerID;
        obj['CustomerProfileID'] = customerProfileID;
        obj['Points'] = points;
    }

    /**
     * Constructs a <code>PendingActivePointsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingActivePointsData} obj Optional instance to populate.
     * @return {module:model/PendingActivePointsData} The populated <code>PendingActivePointsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingActivePointsData();

            if (data.hasOwnProperty('LoyaltyProgramID')) {
                obj['LoyaltyProgramID'] = ApiClient.convertToType(data['LoyaltyProgramID'], 'Number');
            }
            if (data.hasOwnProperty('SubledgerID')) {
                obj['SubledgerID'] = ApiClient.convertToType(data['SubledgerID'], 'String');
            }
            if (data.hasOwnProperty('CustomerProfileID')) {
                obj['CustomerProfileID'] = ApiClient.convertToType(data['CustomerProfileID'], 'String');
            }
            if (data.hasOwnProperty('Points')) {
                obj['Points'] = ApiClient.convertToType(data['Points'], 'Number');
            }
            if (data.hasOwnProperty('ActiveOn')) {
                obj['ActiveOn'] = ApiClient.convertToType(data['ActiveOn'], 'Date');
            }
            if (data.hasOwnProperty('ExpireOn')) {
                obj['ExpireOn'] = ApiClient.convertToType(data['ExpireOn'], 'Date');
            }
            if (data.hasOwnProperty('SessionIntegrationID')) {
                obj['SessionIntegrationID'] = ApiClient.convertToType(data['SessionIntegrationID'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The ID of the loyalty program.
 * @member {Number} LoyaltyProgramID
 */
PendingActivePointsData.prototype['LoyaltyProgramID'] = undefined;

/**
 * The ID of the subledger, when applicable. If this field is empty, the main ledger is used.
 * @member {String} SubledgerID
 * @default ''
 */
PendingActivePointsData.prototype['SubledgerID'] = '';

/**
 * The integration ID of the customer profile whose loyalty points are becoming active.
 * @member {String} CustomerProfileID
 */
PendingActivePointsData.prototype['CustomerProfileID'] = undefined;

/**
 * The amount of pending loyalty points becoming active.
 * @member {Number} Points
 */
PendingActivePointsData.prototype['Points'] = undefined;

/**
 * The date and time the loyalty points become active.
 * @member {Date} ActiveOn
 */
PendingActivePointsData.prototype['ActiveOn'] = undefined;

/**
 * The date and time the loyalty points expire.
 * @member {Date} ExpireOn
 */
PendingActivePointsData.prototype['ExpireOn'] = undefined;

/**
 * The integration ID of the session through which the points were earned.
 * @member {String} SessionIntegrationID
 */
PendingActivePointsData.prototype['SessionIntegrationID'] = undefined;






export default PendingActivePointsData;

