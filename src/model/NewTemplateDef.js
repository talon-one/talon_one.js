/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TemplateArgDef'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TemplateArgDef'));
  } else {
    // Browser globals (root is window)
    if (!root.TalonOne) {
      root.TalonOne = {};
    }
    root.TalonOne.NewTemplateDef = factory(root.TalonOne.ApiClient, root.TalonOne.TemplateArgDef);
  }
}(this, function(ApiClient, TemplateArgDef) {
  'use strict';




  /**
   * The NewTemplateDef model module.
   * @module model/NewTemplateDef
   * @version 3.1.1
   */

  /**
   * Constructs a new <code>NewTemplateDef</code>.
   * @alias module:model/NewTemplateDef
   * @class
   * @param title {String} Campaigner-friendly name for the template that will be shown in the rule editor.
   * @param category {String} Used for grouping templates in the rule editor sidebar.
   * @param expr {Array.<Object>} A Talang expression that contains variable bindings referring to args.
   * @param args {Array.<module:model/TemplateArgDef>} An array of argument definitions.
   */
  var exports = function(title, category, expr, args) {
    var _this = this;

    _this['title'] = title;


    _this['category'] = category;
    _this['expr'] = expr;
    _this['args'] = args;

  };

  /**
   * Constructs a <code>NewTemplateDef</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NewTemplateDef} obj Optional instance to populate.
   * @return {module:model/NewTemplateDef} The populated <code>NewTemplateDef</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('title')) {
        obj['title'] = ApiClient.convertToType(data['title'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('help')) {
        obj['help'] = ApiClient.convertToType(data['help'], 'String');
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ApiClient.convertToType(data['category'], 'String');
      }
      if (data.hasOwnProperty('expr')) {
        obj['expr'] = ApiClient.convertToType(data['expr'], [Object]);
      }
      if (data.hasOwnProperty('args')) {
        obj['args'] = ApiClient.convertToType(data['args'], [TemplateArgDef]);
      }
      if (data.hasOwnProperty('expose')) {
        obj['expose'] = ApiClient.convertToType(data['expose'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Campaigner-friendly name for the template that will be shown in the rule editor.
   * @member {String} title
   */
  exports.prototype['title'] = undefined;
  /**
   * A short description of the template that will be shown in the rule editor.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Extended help text for the template.
   * @member {String} help
   */
  exports.prototype['help'] = undefined;
  /**
   * Used for grouping templates in the rule editor sidebar.
   * @member {String} category
   */
  exports.prototype['category'] = undefined;
  /**
   * A Talang expression that contains variable bindings referring to args.
   * @member {Array.<Object>} expr
   */
  exports.prototype['expr'] = undefined;
  /**
   * An array of argument definitions.
   * @member {Array.<module:model/TemplateArgDef>} args
   */
  exports.prototype['args'] = undefined;
  /**
   * A flag to control exposure in Rule Builder.
   * @member {Boolean} expose
   * @default false
   */
  exports.prototype['expose'] = false;



  return exports;
}));


