/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateArgDef from './TemplateArgDef';

/**
 * The NewTemplateDef model module.
 * @module model/NewTemplateDef
 * @version 4.5.0
 */
class NewTemplateDef {
    /**
     * Constructs a new <code>NewTemplateDef</code>.
     * @alias module:model/NewTemplateDef
     * @param title {String} Campaigner-friendly name for the template that will be shown in the rule editor.
     * @param category {String} Used for grouping templates in the rule editor sidebar.
     * @param expr {Array.<Object>} A Talang expression that contains variable bindings referring to args.
     * @param args {Array.<module:model/TemplateArgDef>} An array of argument definitions.
     */
    constructor(title, category, expr, args) { 
        
        NewTemplateDef.initialize(this, title, category, expr, args);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, category, expr, args) { 
        obj['title'] = title;
        obj['category'] = category;
        obj['expr'] = expr;
        obj['args'] = args;
    }

    /**
     * Constructs a <code>NewTemplateDef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewTemplateDef} obj Optional instance to populate.
     * @return {module:model/NewTemplateDef} The populated <code>NewTemplateDef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewTemplateDef();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('help')) {
                obj['help'] = ApiClient.convertToType(data['help'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('expr')) {
                obj['expr'] = ApiClient.convertToType(data['expr'], [Object]);
            }
            if (data.hasOwnProperty('args')) {
                obj['args'] = ApiClient.convertToType(data['args'], [TemplateArgDef]);
            }
            if (data.hasOwnProperty('expose')) {
                obj['expose'] = ApiClient.convertToType(data['expose'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Campaigner-friendly name for the template that will be shown in the rule editor.
 * @member {String} title
 */
NewTemplateDef.prototype['title'] = undefined;

/**
 * A short description of the template that will be shown in the rule editor.
 * @member {String} description
 */
NewTemplateDef.prototype['description'] = undefined;

/**
 * Extended help text for the template.
 * @member {String} help
 */
NewTemplateDef.prototype['help'] = undefined;

/**
 * Used for grouping templates in the rule editor sidebar.
 * @member {String} category
 */
NewTemplateDef.prototype['category'] = undefined;

/**
 * A Talang expression that contains variable bindings referring to args.
 * @member {Array.<Object>} expr
 */
NewTemplateDef.prototype['expr'] = undefined;

/**
 * An array of argument definitions.
 * @member {Array.<module:model/TemplateArgDef>} args
 */
NewTemplateDef.prototype['args'] = undefined;

/**
 * A flag to control exposure in Rule Builder.
 * @member {Boolean} expose
 * @default false
 */
NewTemplateDef.prototype['expose'] = false;






export default NewTemplateDef;

