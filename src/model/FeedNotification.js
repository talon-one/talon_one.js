/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeedNotification model module.
 * @module model/FeedNotification
 * @version 4.2.0
 */
class FeedNotification {
    /**
     * Constructs a new <code>FeedNotification</code>.
     * A feed notification for CAMA users
     * @alias module:model/FeedNotification
     * @param title {String} Title of the feed notification
     * @param created {Date} Timestamp of the moment this feed notification was created
     * @param updated {Date} Timestamp of the moment this feed notification was last updated
     * @param articleUrl {String} URL to the feed notification in the help center
     * @param type {module:model/FeedNotification.TypeEnum} The type of the feed notification
     * @param body {String} Body of the feed notification
     */
    constructor(title, created, updated, articleUrl, type, body) { 
        
        FeedNotification.initialize(this, title, created, updated, articleUrl, type, body);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, created, updated, articleUrl, type, body) { 
        obj['title'] = title;
        obj['created'] = created;
        obj['updated'] = updated;
        obj['articleUrl'] = articleUrl;
        obj['type'] = type;
        obj['body'] = body;
    }

    /**
     * Constructs a <code>FeedNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedNotification} obj Optional instance to populate.
     * @return {module:model/FeedNotification} The populated <code>FeedNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedNotification();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('articleUrl')) {
                obj['articleUrl'] = ApiClient.convertToType(data['articleUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Title of the feed notification
 * @member {String} title
 */
FeedNotification.prototype['title'] = undefined;

/**
 * Timestamp of the moment this feed notification was created
 * @member {Date} created
 */
FeedNotification.prototype['created'] = undefined;

/**
 * Timestamp of the moment this feed notification was last updated
 * @member {Date} updated
 */
FeedNotification.prototype['updated'] = undefined;

/**
 * URL to the feed notification in the help center
 * @member {String} articleUrl
 */
FeedNotification.prototype['articleUrl'] = undefined;

/**
 * The type of the feed notification
 * @member {module:model/FeedNotification.TypeEnum} type
 */
FeedNotification.prototype['type'] = undefined;

/**
 * Body of the feed notification
 * @member {String} body
 */
FeedNotification.prototype['body'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
FeedNotification['TypeEnum'] = {

    /**
     * value: "feed"
     * @const
     */
    "feed": "feed",

    /**
     * value: "feature"
     * @const
     */
    "feature": "feature",

    /**
     * value: "announcement"
     * @const
     */
    "announcement": "announcement",

    /**
     * value: "alert"
     * @const
     */
    "alert": "alert",

    /**
     * value: "test"
     * @const
     */
    "test": "test"
};



export default FeedNotification;

