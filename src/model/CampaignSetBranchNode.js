/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CampaignSetNode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CampaignSetNode'));
  } else {
    // Browser globals (root is window)
    if (!root.TalonOne) {
      root.TalonOne = {};
    }
    root.TalonOne.CampaignSetBranchNode = factory(root.TalonOne.ApiClient, root.TalonOne.CampaignSetNode);
  }
}(this, function(ApiClient, CampaignSetNode) {
  'use strict';




  /**
   * The CampaignSetBranchNode model module.
   * @module model/CampaignSetBranchNode
   * @version 3.4.0
   */

  /**
   * Constructs a new <code>CampaignSetBranchNode</code>.
   * @alias module:model/CampaignSetBranchNode
   * @class
   * @param type {module:model/CampaignSetBranchNode.TypeEnum} Indicates the node type
   * @param name {String} Name of the set
   * @param operator {module:model/CampaignSetBranchNode.OperatorEnum} How does the set operates on its elements
   * @param elements {Array.<module:model/CampaignSetNode>} Child elements of this set
   */
  var exports = function(type, name, operator, elements) {
    var _this = this;

    _this['type'] = type;
    _this['name'] = name;
    _this['operator'] = operator;
    _this['elements'] = elements;
  };

  /**
   * Constructs a <code>CampaignSetBranchNode</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CampaignSetBranchNode} obj Optional instance to populate.
   * @return {module:model/CampaignSetBranchNode} The populated <code>CampaignSetBranchNode</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('operator')) {
        obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
      }
      if (data.hasOwnProperty('elements')) {
        obj['elements'] = ApiClient.convertToType(data['elements'], [CampaignSetNode]);
      }
    }
    return obj;
  }

  /**
   * Indicates the node type
   * @member {module:model/CampaignSetBranchNode.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Name of the set
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * How does the set operates on its elements
   * @member {module:model/CampaignSetBranchNode.OperatorEnum} operator
   */
  exports.prototype['operator'] = undefined;
  /**
   * Child elements of this set
   * @member {Array.<module:model/CampaignSetNode>} elements
   */
  exports.prototype['elements'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "SET"
     * @const
     */
    "SET": "SET"  };

  /**
   * Allowed values for the <code>operator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OperatorEnum = {
    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",
    /**
     * value: "FIRST"
     * @const
     */
    "FIRST": "FIRST"  };


  return exports;
}));


