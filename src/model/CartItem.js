/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CartItem model module.
 * @module model/CartItem
 * @version 4.4.0
 */
class CartItem {
    /**
     * Constructs a new <code>CartItem</code>.
     * @alias module:model/CartItem
     * @param name {String} Name of item
     * @param sku {String} Stock keeping unit of item
     * @param quantity {Number} Quantity of item. **Important:** If you enabled [cart item flattening](https://help.talon.one/hc/en-us/articles/360016036899-Flattening-Cart-Items), the quantity is always one and the same cart item might receive multiple per-item discounts. Ensure you can process multiple discounts on one cart item correctly. 
     * @param price {Number} Price of item
     */
    constructor(name, sku, quantity, price) { 
        
        CartItem.initialize(this, name, sku, quantity, price);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, sku, quantity, price) { 
        obj['name'] = name;
        obj['sku'] = sku;
        obj['quantity'] = quantity;
        obj['price'] = price;
    }

    /**
     * Constructs a <code>CartItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartItem} obj Optional instance to populate.
     * @return {module:model/CartItem} The populated <code>CartItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartItem();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
        }
        return obj;
    }


}

/**
 * Name of item
 * @member {String} name
 */
CartItem.prototype['name'] = undefined;

/**
 * Stock keeping unit of item
 * @member {String} sku
 */
CartItem.prototype['sku'] = undefined;

/**
 * Quantity of item. **Important:** If you enabled [cart item flattening](https://help.talon.one/hc/en-us/articles/360016036899-Flattening-Cart-Items), the quantity is always one and the same cart item might receive multiple per-item discounts. Ensure you can process multiple discounts on one cart item correctly. 
 * @member {Number} quantity
 */
CartItem.prototype['quantity'] = undefined;

/**
 * Price of item
 * @member {Number} price
 */
CartItem.prototype['price'] = undefined;

/**
 * Type, group or model of the item
 * @member {String} category
 */
CartItem.prototype['category'] = undefined;

/**
 * Weight of item in grams
 * @member {Number} weight
 */
CartItem.prototype['weight'] = undefined;

/**
 * Height of item in mm
 * @member {Number} height
 */
CartItem.prototype['height'] = undefined;

/**
 * Width of item in mm
 * @member {Number} width
 */
CartItem.prototype['width'] = undefined;

/**
 * Length of item in mm
 * @member {Number} length
 */
CartItem.prototype['length'] = undefined;

/**
 * Position of the Cart Item in the Cart (calculated internally)
 * @member {Number} position
 */
CartItem.prototype['position'] = undefined;

/**
 * Arbitrary properties associated with this item. You can use built-in attributes or create your own. See [Attributes](https://docs.talon.one/docs/dev/concepts/attributes). 
 * @member {Object} attributes
 */
CartItem.prototype['attributes'] = undefined;






export default CartItem;

