/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimePoint model module.
 * @module model/TimePoint
 * @version 11.1.0
 */
class TimePoint {
    /**
     * Constructs a new <code>TimePoint</code>.
     * The absolute duration after which the achievement ends and resets for a particular customer profile.  **Note**: The duration follows the time zone of the Application this achievement belongs to. 
     * @alias module:model/TimePoint
     * @param hour {Number} The achievement ends and resets at this hour.
     * @param minute {Number} The achievement ends and resets at this minute.
     * @param second {Number} The achievement ends and resets at this second.
     */
    constructor(hour, minute, second) { 
        
        TimePoint.initialize(this, hour, minute, second);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hour, minute, second) { 
        obj['hour'] = hour;
        obj['minute'] = minute;
        obj['second'] = second;
    }

    /**
     * Constructs a <code>TimePoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimePoint} obj Optional instance to populate.
     * @return {module:model/TimePoint} The populated <code>TimePoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimePoint();

            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'Number');
            }
            if (data.hasOwnProperty('dayOfMonth')) {
                obj['dayOfMonth'] = ApiClient.convertToType(data['dayOfMonth'], 'Number');
            }
            if (data.hasOwnProperty('dayOfWeek')) {
                obj['dayOfWeek'] = ApiClient.convertToType(data['dayOfWeek'], 'Number');
            }
            if (data.hasOwnProperty('hour')) {
                obj['hour'] = ApiClient.convertToType(data['hour'], 'Number');
            }
            if (data.hasOwnProperty('minute')) {
                obj['minute'] = ApiClient.convertToType(data['minute'], 'Number');
            }
            if (data.hasOwnProperty('second')) {
                obj['second'] = ApiClient.convertToType(data['second'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to `Y`. 
 * @member {Number} month
 */
TimePoint.prototype['month'] = undefined;

/**
 * The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to `Y` or `M`. 
 * @member {Number} dayOfMonth
 */
TimePoint.prototype['dayOfMonth'] = undefined;

/**
 * The achievement ends and resets on this day of the week. `1` represents `Monday` and `7` represents `Sunday`.  **Note**: Only applicable if the period is set to `W`. 
 * @member {Number} dayOfWeek
 */
TimePoint.prototype['dayOfWeek'] = undefined;

/**
 * The achievement ends and resets at this hour.
 * @member {Number} hour
 */
TimePoint.prototype['hour'] = undefined;

/**
 * The achievement ends and resets at this minute.
 * @member {Number} minute
 */
TimePoint.prototype['minute'] = undefined;

/**
 * The achievement ends and resets at this second.
 * @member {Number} second
 */
TimePoint.prototype['second'] = undefined;






export default TimePoint;

