/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewPriceAdjustment model module.
 * @module model/NewPriceAdjustment
 * @version .0
 */
class NewPriceAdjustment {
    /**
     * Constructs a new <code>NewPriceAdjustment</code>.
     * @alias module:model/NewPriceAdjustment
     * @param priceType {String} The price type (e.g. the price for members only) to apply to a given SKU.
     * @param referenceId {String} A unique reference identifier, e.g. a UUID.
     */
    constructor(priceType, referenceId) { 
        
        NewPriceAdjustment.initialize(this, priceType, referenceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, priceType, referenceId) { 
        obj['priceType'] = priceType;
        obj['referenceId'] = referenceId;
    }

    /**
     * Constructs a <code>NewPriceAdjustment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewPriceAdjustment} obj Optional instance to populate.
     * @return {module:model/NewPriceAdjustment} The populated <code>NewPriceAdjustment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewPriceAdjustment();

            if (data.hasOwnProperty('priceType')) {
                obj['priceType'] = ApiClient.convertToType(data['priceType'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('referenceId')) {
                obj['referenceId'] = ApiClient.convertToType(data['referenceId'], 'String');
            }
            if (data.hasOwnProperty('calculatedAt')) {
                obj['calculatedAt'] = ApiClient.convertToType(data['calculatedAt'], 'Date');
            }
            if (data.hasOwnProperty('effectiveFrom')) {
                obj['effectiveFrom'] = ApiClient.convertToType(data['effectiveFrom'], 'Date');
            }
            if (data.hasOwnProperty('effectiveUntil')) {
                obj['effectiveUntil'] = ApiClient.convertToType(data['effectiveUntil'], 'Date');
            }
            if (data.hasOwnProperty('contextId')) {
                obj['contextId'] = ApiClient.convertToType(data['contextId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The price type (e.g. the price for members only) to apply to a given SKU.
 * @member {String} priceType
 */
NewPriceAdjustment.prototype['priceType'] = undefined;

/**
 * The value of the price type applied to the SKU. When set to `null`, the defined price type no longer applies to the SKU.
 * @member {Number} price
 */
NewPriceAdjustment.prototype['price'] = undefined;

/**
 * A unique reference identifier, e.g. a UUID.
 * @member {String} referenceId
 */
NewPriceAdjustment.prototype['referenceId'] = undefined;

/**
 * The time at which this price was calculated. If provided, this is used to determine the most recent price adjustment to choose if price adjustments overlap. Defaults to internal creation time if not provided.
 * @member {Date} calculatedAt
 */
NewPriceAdjustment.prototype['calculatedAt'] = undefined;

/**
 * The date and time from which the price adjustment is effective.
 * @member {Date} effectiveFrom
 */
NewPriceAdjustment.prototype['effectiveFrom'] = undefined;

/**
 * The date and time until which the price adjustment is effective.
 * @member {Date} effectiveUntil
 */
NewPriceAdjustment.prototype['effectiveUntil'] = undefined;

/**
 * Identifier of the context of this price adjustment (e.g. summer sale).
 * @member {String} contextId
 */
NewPriceAdjustment.prototype['contextId'] = undefined;






export default NewPriceAdjustment;

