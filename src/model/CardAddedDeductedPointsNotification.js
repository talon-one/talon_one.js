/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardAddedDeductedPointsNotification model module.
 * @module model/CardAddedDeductedPointsNotification
 * @version .0
 */
class CardAddedDeductedPointsNotification {
    /**
     * Constructs a new <code>CardAddedDeductedPointsNotification</code>.
     * @alias module:model/CardAddedDeductedPointsNotification
     * @param profileIntegrationIDs {Array.<String>} The integration ID of the customer profile to whom points were added or deducted.
     * @param loyaltyProgramID {Number} The ID of the loyalty program.
     * @param subledgerID {String} The ID of the subledger within the loyalty program where these points were added or deducted.
     * @param amount {Number} The amount of added or deducted loyalty points.
     * @param reason {String} The reason for the points addition or deduction.
     * @param typeOfChange {module:model/CardAddedDeductedPointsNotification.TypeOfChangeEnum} The notification source, that is, it indicates whether the points were added or deducted via one of the following routes:  - [The Campaign Manager](/docs/product/getting-started)  - [Management API](/management-api#tag/Loyalty)  - [Rule Engine](/docs/product/applications/evaluation-order-for-rules-and-filters) 
     * @param employeeName {String} The name of the employee who added or deducted points.
     * @param userID {Number} The ID of the employee who added or deducted points.
     * @param operation {module:model/CardAddedDeductedPointsNotification.OperationEnum} The action (addition or deduction) made with loyalty points.
     * @param sessionIntegrationID {String} The integration ID of the session through which the points were earned or lost.
     * @param notificationType {module:model/CardAddedDeductedPointsNotification.NotificationTypeEnum} The type of notification.
     * @param cardIdentifier {String} Loyalty card identification number.
     * @param usersPerCardLimit {Number} The max amount of user profiles with whom a card can be shared. This can be set to `0` for no limit.
     */
    constructor(profileIntegrationIDs, loyaltyProgramID, subledgerID, amount, reason, typeOfChange, employeeName, userID, operation, sessionIntegrationID, notificationType, cardIdentifier, usersPerCardLimit) { 
        
        CardAddedDeductedPointsNotification.initialize(this, profileIntegrationIDs, loyaltyProgramID, subledgerID, amount, reason, typeOfChange, employeeName, userID, operation, sessionIntegrationID, notificationType, cardIdentifier, usersPerCardLimit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, profileIntegrationIDs, loyaltyProgramID, subledgerID, amount, reason, typeOfChange, employeeName, userID, operation, sessionIntegrationID, notificationType, cardIdentifier, usersPerCardLimit) { 
        obj['ProfileIntegrationIDs'] = profileIntegrationIDs;
        obj['LoyaltyProgramID'] = loyaltyProgramID;
        obj['SubledgerID'] = subledgerID;
        obj['Amount'] = amount;
        obj['Reason'] = reason;
        obj['TypeOfChange'] = typeOfChange;
        obj['EmployeeName'] = employeeName;
        obj['UserID'] = userID;
        obj['Operation'] = operation;
        obj['SessionIntegrationID'] = sessionIntegrationID;
        obj['NotificationType'] = notificationType;
        obj['CardIdentifier'] = cardIdentifier;
        obj['UsersPerCardLimit'] = usersPerCardLimit;
    }

    /**
     * Constructs a <code>CardAddedDeductedPointsNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardAddedDeductedPointsNotification} obj Optional instance to populate.
     * @return {module:model/CardAddedDeductedPointsNotification} The populated <code>CardAddedDeductedPointsNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardAddedDeductedPointsNotification();

            if (data.hasOwnProperty('ProfileIntegrationIDs')) {
                obj['ProfileIntegrationIDs'] = ApiClient.convertToType(data['ProfileIntegrationIDs'], ['String']);
            }
            if (data.hasOwnProperty('LoyaltyProgramID')) {
                obj['LoyaltyProgramID'] = ApiClient.convertToType(data['LoyaltyProgramID'], 'Number');
            }
            if (data.hasOwnProperty('SubledgerID')) {
                obj['SubledgerID'] = ApiClient.convertToType(data['SubledgerID'], 'String');
            }
            if (data.hasOwnProperty('Amount')) {
                obj['Amount'] = ApiClient.convertToType(data['Amount'], 'Number');
            }
            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], 'String');
            }
            if (data.hasOwnProperty('TypeOfChange')) {
                obj['TypeOfChange'] = ApiClient.convertToType(data['TypeOfChange'], 'String');
            }
            if (data.hasOwnProperty('EmployeeName')) {
                obj['EmployeeName'] = ApiClient.convertToType(data['EmployeeName'], 'String');
            }
            if (data.hasOwnProperty('UserID')) {
                obj['UserID'] = ApiClient.convertToType(data['UserID'], 'Number');
            }
            if (data.hasOwnProperty('Operation')) {
                obj['Operation'] = ApiClient.convertToType(data['Operation'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
            if (data.hasOwnProperty('ExpiryDate')) {
                obj['ExpiryDate'] = ApiClient.convertToType(data['ExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('SessionIntegrationID')) {
                obj['SessionIntegrationID'] = ApiClient.convertToType(data['SessionIntegrationID'], 'String');
            }
            if (data.hasOwnProperty('NotificationType')) {
                obj['NotificationType'] = ApiClient.convertToType(data['NotificationType'], 'String');
            }
            if (data.hasOwnProperty('CardIdentifier')) {
                obj['CardIdentifier'] = ApiClient.convertToType(data['CardIdentifier'], 'String');
            }
            if (data.hasOwnProperty('UsersPerCardLimit')) {
                obj['UsersPerCardLimit'] = ApiClient.convertToType(data['UsersPerCardLimit'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The integration ID of the customer profile to whom points were added or deducted.
 * @member {Array.<String>} ProfileIntegrationIDs
 */
CardAddedDeductedPointsNotification.prototype['ProfileIntegrationIDs'] = undefined;

/**
 * The ID of the loyalty program.
 * @member {Number} LoyaltyProgramID
 */
CardAddedDeductedPointsNotification.prototype['LoyaltyProgramID'] = undefined;

/**
 * The ID of the subledger within the loyalty program where these points were added or deducted.
 * @member {String} SubledgerID
 */
CardAddedDeductedPointsNotification.prototype['SubledgerID'] = undefined;

/**
 * The amount of added or deducted loyalty points.
 * @member {Number} Amount
 */
CardAddedDeductedPointsNotification.prototype['Amount'] = undefined;

/**
 * The reason for the points addition or deduction.
 * @member {String} Reason
 */
CardAddedDeductedPointsNotification.prototype['Reason'] = undefined;

/**
 * The notification source, that is, it indicates whether the points were added or deducted via one of the following routes:  - [The Campaign Manager](/docs/product/getting-started)  - [Management API](/management-api#tag/Loyalty)  - [Rule Engine](/docs/product/applications/evaluation-order-for-rules-and-filters) 
 * @member {module:model/CardAddedDeductedPointsNotification.TypeOfChangeEnum} TypeOfChange
 */
CardAddedDeductedPointsNotification.prototype['TypeOfChange'] = undefined;

/**
 * The name of the employee who added or deducted points.
 * @member {String} EmployeeName
 */
CardAddedDeductedPointsNotification.prototype['EmployeeName'] = undefined;

/**
 * The ID of the employee who added or deducted points.
 * @member {Number} UserID
 */
CardAddedDeductedPointsNotification.prototype['UserID'] = undefined;

/**
 * The action (addition or deduction) made with loyalty points.
 * @member {module:model/CardAddedDeductedPointsNotification.OperationEnum} Operation
 */
CardAddedDeductedPointsNotification.prototype['Operation'] = undefined;

/**
 * The start date for loyalty points.
 * @member {Date} StartDate
 */
CardAddedDeductedPointsNotification.prototype['StartDate'] = undefined;

/**
 * The expiration date for loyalty points.
 * @member {Date} ExpiryDate
 */
CardAddedDeductedPointsNotification.prototype['ExpiryDate'] = undefined;

/**
 * The integration ID of the session through which the points were earned or lost.
 * @member {String} SessionIntegrationID
 */
CardAddedDeductedPointsNotification.prototype['SessionIntegrationID'] = undefined;

/**
 * The type of notification.
 * @member {module:model/CardAddedDeductedPointsNotification.NotificationTypeEnum} NotificationType
 */
CardAddedDeductedPointsNotification.prototype['NotificationType'] = undefined;

/**
 * Loyalty card identification number.
 * @member {String} CardIdentifier
 */
CardAddedDeductedPointsNotification.prototype['CardIdentifier'] = undefined;

/**
 * The max amount of user profiles with whom a card can be shared. This can be set to `0` for no limit.
 * @member {Number} UsersPerCardLimit
 */
CardAddedDeductedPointsNotification.prototype['UsersPerCardLimit'] = undefined;





/**
 * Allowed values for the <code>TypeOfChange</code> property.
 * @enum {String}
 * @readonly
 */
CardAddedDeductedPointsNotification['TypeOfChangeEnum'] = {

    /**
     * value: "campaign_manager"
     * @const
     */
    "campaign_manager": "campaign_manager",

    /**
     * value: "rule_engine"
     * @const
     */
    "rule_engine": "rule_engine",

    /**
     * value: "management_api"
     * @const
     */
    "management_api": "management_api"
};


/**
 * Allowed values for the <code>Operation</code> property.
 * @enum {String}
 * @readonly
 */
CardAddedDeductedPointsNotification['OperationEnum'] = {

    /**
     * value: "addition"
     * @const
     */
    "addition": "addition",

    /**
     * value: "deduction"
     * @const
     */
    "deduction": "deduction"
};


/**
 * Allowed values for the <code>NotificationType</code> property.
 * @enum {String}
 * @readonly
 */
CardAddedDeductedPointsNotification['NotificationTypeEnum'] = {

    /**
     * value: "LoyaltyCardPointsDeducted"
     * @const
     */
    "LoyaltyCardPointsDeducted": "LoyaltyCardPointsDeducted",

    /**
     * value: "LoyaltyCardPointsAdded"
     * @const
     */
    "LoyaltyCardPointsAdded": "LoyaltyCardPointsAdded"
};



export default CardAddedDeductedPointsNotification;

