/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewEventType model module.
 * @module model/NewEventType
 * @version 4.5.0
 */
class NewEventType {
    /**
     * Constructs a new <code>NewEventType</code>.
     * 
     * @alias module:model/NewEventType
     * @param title {String} The human-friendly display name for this event type. Use a short, past-tense, description of the event.
     * @param name {String} The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.
     */
    constructor(title, name) { 
        
        NewEventType.initialize(this, title, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, name) { 
        obj['title'] = title;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>NewEventType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewEventType} obj Optional instance to populate.
     * @return {module:model/NewEventType} The populated <code>NewEventType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewEventType();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The human-friendly display name for this event type. Use a short, past-tense, description of the event.
 * @member {String} title
 */
NewEventType.prototype['title'] = undefined;

/**
 * The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.
 * @member {String} name
 */
NewEventType.prototype['name'] = undefined;

/**
 * An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:  > The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway. 
 * @member {String} description
 */
NewEventType.prototype['description'] = undefined;






export default NewEventType;

