/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tier from './Tier';

/**
 * The LedgerInfo model module.
 * @module model/LedgerInfo
 * @version 4.4.0
 */
class LedgerInfo {
    /**
     * Constructs a new <code>LedgerInfo</code>.
     * 
     * @alias module:model/LedgerInfo
     * @param currentBalance {Number} Sum of current active points amounts
     * @param pendingBalance {Number} Sum of pending points amounts
     * @param expiredBalance {Number} Sum of expired points amounts
     * @param spentBalance {Number} Sum of spent points amounts
     * @param tentativeCurrentBalance {Number} Sum of current active points amounts, including additions and deductions on open sessions
     */
    constructor(currentBalance, pendingBalance, expiredBalance, spentBalance, tentativeCurrentBalance) { 
        
        LedgerInfo.initialize(this, currentBalance, pendingBalance, expiredBalance, spentBalance, tentativeCurrentBalance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentBalance, pendingBalance, expiredBalance, spentBalance, tentativeCurrentBalance) { 
        obj['currentBalance'] = currentBalance;
        obj['pendingBalance'] = pendingBalance;
        obj['expiredBalance'] = expiredBalance;
        obj['spentBalance'] = spentBalance;
        obj['tentativeCurrentBalance'] = tentativeCurrentBalance;
    }

    /**
     * Constructs a <code>LedgerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LedgerInfo} obj Optional instance to populate.
     * @return {module:model/LedgerInfo} The populated <code>LedgerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LedgerInfo();

            if (data.hasOwnProperty('currentBalance')) {
                obj['currentBalance'] = ApiClient.convertToType(data['currentBalance'], 'Number');
            }
            if (data.hasOwnProperty('pendingBalance')) {
                obj['pendingBalance'] = ApiClient.convertToType(data['pendingBalance'], 'Number');
            }
            if (data.hasOwnProperty('expiredBalance')) {
                obj['expiredBalance'] = ApiClient.convertToType(data['expiredBalance'], 'Number');
            }
            if (data.hasOwnProperty('spentBalance')) {
                obj['spentBalance'] = ApiClient.convertToType(data['spentBalance'], 'Number');
            }
            if (data.hasOwnProperty('tentativeCurrentBalance')) {
                obj['tentativeCurrentBalance'] = ApiClient.convertToType(data['tentativeCurrentBalance'], 'Number');
            }
            if (data.hasOwnProperty('currentTier')) {
                obj['currentTier'] = Tier.constructFromObject(data['currentTier']);
            }
            if (data.hasOwnProperty('pointsToNextTier')) {
                obj['pointsToNextTier'] = ApiClient.convertToType(data['pointsToNextTier'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Sum of current active points amounts
 * @member {Number} currentBalance
 */
LedgerInfo.prototype['currentBalance'] = undefined;

/**
 * Sum of pending points amounts
 * @member {Number} pendingBalance
 */
LedgerInfo.prototype['pendingBalance'] = undefined;

/**
 * Sum of expired points amounts
 * @member {Number} expiredBalance
 */
LedgerInfo.prototype['expiredBalance'] = undefined;

/**
 * Sum of spent points amounts
 * @member {Number} spentBalance
 */
LedgerInfo.prototype['spentBalance'] = undefined;

/**
 * Sum of current active points amounts, including additions and deductions on open sessions
 * @member {Number} tentativeCurrentBalance
 */
LedgerInfo.prototype['tentativeCurrentBalance'] = undefined;

/**
 * @member {module:model/Tier} currentTier
 */
LedgerInfo.prototype['currentTier'] = undefined;

/**
 * Points required to move up a tier.
 * @member {Number} pointsToNextTier
 */
LedgerInfo.prototype['pointsToNextTier'] = undefined;






export default LedgerInfo;

