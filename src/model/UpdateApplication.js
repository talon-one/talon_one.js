/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LimitConfig'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LimitConfig'));
  } else {
    // Browser globals (root is window)
    if (!root.TalonOne) {
      root.TalonOne = {};
    }
    root.TalonOne.UpdateApplication = factory(root.TalonOne.ApiClient, root.TalonOne.LimitConfig);
  }
}(this, function(ApiClient, LimitConfig) {
  'use strict';




  /**
   * The UpdateApplication model module.
   * @module model/UpdateApplication
   * @version 3.3.0
   */

  /**
   * Constructs a new <code>UpdateApplication</code>.
   * @alias module:model/UpdateApplication
   * @class
   * @param name {String} The name of this application.
   * @param timezone {String} A string containing an IANA timezone descriptor.
   * @param currency {String} A string describing a default currency for new customer sessions.
   */
  var exports = function(name, timezone, currency) {
    var _this = this;

    _this['name'] = name;

    _this['timezone'] = timezone;
    _this['currency'] = currency;



  };

  /**
   * Constructs a <code>UpdateApplication</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UpdateApplication} obj Optional instance to populate.
   * @return {module:model/UpdateApplication} The populated <code>UpdateApplication</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('timezone')) {
        obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('caseSensitivity')) {
        obj['caseSensitivity'] = ApiClient.convertToType(data['caseSensitivity'], 'String');
      }
      if (data.hasOwnProperty('attributes')) {
        obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
      }
      if (data.hasOwnProperty('limits')) {
        obj['limits'] = ApiClient.convertToType(data['limits'], [LimitConfig]);
      }
    }
    return obj;
  }

  /**
   * The name of this application.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * A longer description of the application.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * A string containing an IANA timezone descriptor.
   * @member {String} timezone
   */
  exports.prototype['timezone'] = undefined;
  /**
   * A string describing a default currency for new customer sessions.
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * A string indicating how should campaigns in this application deal with case sensitivity on coupon codes.
   * @member {module:model/UpdateApplication.CaseSensitivityEnum} caseSensitivity
   */
  exports.prototype['caseSensitivity'] = undefined;
  /**
   * Arbitrary properties associated with this campaign
   * @member {Object} attributes
   */
  exports.prototype['attributes'] = undefined;
  /**
   * Default limits for campaigns created in this application
   * @member {Array.<module:model/LimitConfig>} limits
   */
  exports.prototype['limits'] = undefined;


  /**
   * Allowed values for the <code>caseSensitivity</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CaseSensitivityEnum = {
    /**
     * value: "sensitive"
     * @const
     */
    "sensitive": "sensitive",
    /**
     * value: "insensitive-uppercase"
     * @const
     */
    "insensitive-uppercase": "insensitive-uppercase",
    /**
     * value: "insensitive-lowercase"
     * @const
     */
    "insensitive-lowercase": "insensitive-lowercase"  };


  return exports;
}));


