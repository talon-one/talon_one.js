/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Referral model module.
 * @module model/Referral
 * @version 4.1.0
 */
class Referral {
    /**
     * Constructs a new <code>Referral</code>.
     * 
     * @alias module:model/Referral
     * @param id {Number} Unique ID for this entity.
     * @param created {Date} The exact moment this entity was created.
     * @param campaignId {Number} ID of the campaign from which the referral received the referral code.
     * @param advocateProfileIntegrationId {String} The Integration Id of the Advocate's Profile
     * @param code {String} The actual referral code.
     * @param usageCounter {Number} The number of times this referral code has been successfully used.
     * @param usageLimit {Number} The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
     */
    constructor(id, created, campaignId, advocateProfileIntegrationId, code, usageCounter, usageLimit) { 
        
        Referral.initialize(this, id, created, campaignId, advocateProfileIntegrationId, code, usageCounter, usageLimit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, campaignId, advocateProfileIntegrationId, code, usageCounter, usageLimit) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['campaignId'] = campaignId;
        obj['advocateProfileIntegrationId'] = advocateProfileIntegrationId;
        obj['code'] = code;
        obj['usageCounter'] = usageCounter;
        obj['usageLimit'] = usageLimit;
    }

    /**
     * Constructs a <code>Referral</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Referral} obj Optional instance to populate.
     * @return {module:model/Referral} The populated <code>Referral</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Referral();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('advocateProfileIntegrationId')) {
                obj['advocateProfileIntegrationId'] = ApiClient.convertToType(data['advocateProfileIntegrationId'], 'String');
            }
            if (data.hasOwnProperty('friendProfileIntegrationId')) {
                obj['friendProfileIntegrationId'] = ApiClient.convertToType(data['friendProfileIntegrationId'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('usageCounter')) {
                obj['usageCounter'] = ApiClient.convertToType(data['usageCounter'], 'Number');
            }
            if (data.hasOwnProperty('usageLimit')) {
                obj['usageLimit'] = ApiClient.convertToType(data['usageLimit'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Unique ID for this entity.
 * @member {Number} id
 */
Referral.prototype['id'] = undefined;

/**
 * The exact moment this entity was created.
 * @member {Date} created
 */
Referral.prototype['created'] = undefined;

/**
 * ID of the campaign from which the referral received the referral code.
 * @member {Number} campaignId
 */
Referral.prototype['campaignId'] = undefined;

/**
 * The Integration Id of the Advocate's Profile
 * @member {String} advocateProfileIntegrationId
 */
Referral.prototype['advocateProfileIntegrationId'] = undefined;

/**
 * An optional Integration ID of the Friend's Profile
 * @member {String} friendProfileIntegrationId
 */
Referral.prototype['friendProfileIntegrationId'] = undefined;

/**
 * Timestamp at which point the referral code becomes valid.
 * @member {Date} startDate
 */
Referral.prototype['startDate'] = undefined;

/**
 * Expiry date of the referral code. Referral never expires if this is omitted, zero, or negative.
 * @member {Date} expiryDate
 */
Referral.prototype['expiryDate'] = undefined;

/**
 * The actual referral code.
 * @member {String} code
 */
Referral.prototype['code'] = undefined;

/**
 * The number of times this referral code has been successfully used.
 * @member {Number} usageCounter
 */
Referral.prototype['usageCounter'] = undefined;

/**
 * The number of times a referral code can be used. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
 * @member {Number} usageLimit
 */
Referral.prototype['usageLimit'] = undefined;






export default Referral;

