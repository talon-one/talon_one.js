/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Coupon model module.
 * @module model/Coupon
 * @version 4.0.0
 */
class Coupon {
    /**
     * Constructs a new <code>Coupon</code>.
     * 
     * @alias module:model/Coupon
     * @param id {Number} Unique ID for this entity.
     * @param created {Date} The exact moment this entity was created.
     * @param campaignId {Number} The ID of the campaign that owns this entity.
     * @param value {String} The actual coupon code.
     * @param usageLimit {Number} The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
     * @param usageCounter {Number} The number of times this coupon has been successfully used.
     */
    constructor(id, created, campaignId, value, usageLimit, usageCounter) { 
        
        Coupon.initialize(this, id, created, campaignId, value, usageLimit, usageCounter);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, campaignId, value, usageLimit, usageCounter) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['campaignId'] = campaignId;
        obj['value'] = value;
        obj['usageLimit'] = usageLimit;
        obj['usageCounter'] = usageCounter;
    }

    /**
     * Constructs a <code>Coupon</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Coupon} obj Optional instance to populate.
     * @return {module:model/Coupon} The populated <code>Coupon</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Coupon();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('usageLimit')) {
                obj['usageLimit'] = ApiClient.convertToType(data['usageLimit'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('usageCounter')) {
                obj['usageCounter'] = ApiClient.convertToType(data['usageCounter'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('referralId')) {
                obj['referralId'] = ApiClient.convertToType(data['referralId'], 'Number');
            }
            if (data.hasOwnProperty('recipientIntegrationId')) {
                obj['recipientIntegrationId'] = ApiClient.convertToType(data['recipientIntegrationId'], 'String');
            }
            if (data.hasOwnProperty('importId')) {
                obj['importId'] = ApiClient.convertToType(data['importId'], 'Number');
            }
            if (data.hasOwnProperty('reservation')) {
                obj['reservation'] = ApiClient.convertToType(data['reservation'], 'Boolean');
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Unique ID for this entity.
 * @member {Number} id
 */
Coupon.prototype['id'] = undefined;

/**
 * The exact moment this entity was created.
 * @member {Date} created
 */
Coupon.prototype['created'] = undefined;

/**
 * The ID of the campaign that owns this entity.
 * @member {Number} campaignId
 */
Coupon.prototype['campaignId'] = undefined;

/**
 * The actual coupon code.
 * @member {String} value
 */
Coupon.prototype['value'] = undefined;

/**
 * The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
 * @member {Number} usageLimit
 */
Coupon.prototype['usageLimit'] = undefined;

/**
 * Timestamp at which point the coupon becomes valid.
 * @member {Date} startDate
 */
Coupon.prototype['startDate'] = undefined;

/**
 * Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.
 * @member {Date} expiryDate
 */
Coupon.prototype['expiryDate'] = undefined;

/**
 * The number of times this coupon has been successfully used.
 * @member {Number} usageCounter
 */
Coupon.prototype['usageCounter'] = undefined;

/**
 * Arbitrary properties associated with this item
 * @member {Object} attributes
 */
Coupon.prototype['attributes'] = undefined;

/**
 * The integration ID of the referring customer (if any) for whom this coupon was created as an effect.
 * @member {Number} referralId
 */
Coupon.prototype['referralId'] = undefined;

/**
 * The integration ID of a referred customer profile.
 * @member {String} recipientIntegrationId
 */
Coupon.prototype['recipientIntegrationId'] = undefined;

/**
 * The ID of the Import which created this coupon.
 * @member {Number} importId
 */
Coupon.prototype['importId'] = undefined;

/**
 * This value controls what reservations mean to a coupon. If set to true the coupon reservation is used to mark it as a favourite, if set to false the coupon reservation is used as a requirement of usage. This value defaults to true if not specified.
 * @member {Boolean} reservation
 */
Coupon.prototype['reservation'] = undefined;

/**
 * The id of the batch the coupon belongs to.
 * @member {String} batchId
 */
Coupon.prototype['batchId'] = undefined;






export default Coupon;

