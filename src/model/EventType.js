/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventType model module.
 * @module model/EventType
 * @version 5.0.0
 */
class EventType {
    /**
     * Constructs a new <code>EventType</code>.
     * 
     * @alias module:model/EventType
     * @param id {Number} Internal ID of this entity.
     * @param created {Date} The time this entity was created.
     * @param title {String} The human-friendly name for this event type.
     * @param name {String} The integration name for this event type. This will be used in URLs and cannot be changed after an event type has been created.
     */
    constructor(id, created, title, name) { 
        
        EventType.initialize(this, id, created, title, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, title, name) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['title'] = title;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>EventType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventType} obj Optional instance to populate.
     * @return {module:model/EventType} The populated <code>EventType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventType();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Internal ID of this entity.
 * @member {Number} id
 */
EventType.prototype['id'] = undefined;

/**
 * The time this entity was created.
 * @member {Date} created
 */
EventType.prototype['created'] = undefined;

/**
 * The human-friendly name for this event type.
 * @member {String} title
 */
EventType.prototype['title'] = undefined;

/**
 * The integration name for this event type. This will be used in URLs and cannot be changed after an event type has been created.
 * @member {String} name
 */
EventType.prototype['name'] = undefined;

/**
 * A description of what the event represents. 
 * @member {String} description
 */
EventType.prototype['description'] = undefined;






export default EventType;

