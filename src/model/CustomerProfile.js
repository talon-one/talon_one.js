/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyMembership from './LoyaltyMembership';

/**
 * The CustomerProfile model module.
 * @module model/CustomerProfile
 * @version 4.0.0
 */
class CustomerProfile {
    /**
     * Constructs a new <code>CustomerProfile</code>.
     * 
     * @alias module:model/CustomerProfile
     * @param integrationId {String} The ID used for this entity in the application system.
     * @param created {Date} The exact moment this entity was created.
     * @param attributes {Object} Arbitrary properties associated with this item
     * @param accountId {Number} The ID of the Talon.One account that owns this profile.
     * @param closedSessions {Number} The total amount of closed sessions by a customer. A closed session is a successful purchase.
     * @param totalSales {Number} Sum of all purchases made by this customer
     * @param lastActivity {Date} Timestamp of the most recent event received from this customer
     */
    constructor(integrationId, created, attributes, accountId, closedSessions, totalSales, lastActivity) { 
        
        CustomerProfile.initialize(this, integrationId, created, attributes, accountId, closedSessions, totalSales, lastActivity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, integrationId, created, attributes, accountId, closedSessions, totalSales, lastActivity) { 
        obj['integrationId'] = integrationId;
        obj['created'] = created;
        obj['attributes'] = attributes;
        obj['accountId'] = accountId;
        obj['closedSessions'] = closedSessions;
        obj['totalSales'] = totalSales;
        obj['lastActivity'] = lastActivity;
    }

    /**
     * Constructs a <code>CustomerProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerProfile} obj Optional instance to populate.
     * @return {module:model/CustomerProfile} The populated <code>CustomerProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerProfile();

            if (data.hasOwnProperty('integrationId')) {
                obj['integrationId'] = ApiClient.convertToType(data['integrationId'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('closedSessions')) {
                obj['closedSessions'] = ApiClient.convertToType(data['closedSessions'], 'Number');
            }
            if (data.hasOwnProperty('totalSales')) {
                obj['totalSales'] = ApiClient.convertToType(data['totalSales'], 'Number');
            }
            if (data.hasOwnProperty('loyaltyMemberships')) {
                obj['loyaltyMemberships'] = ApiClient.convertToType(data['loyaltyMemberships'], [LoyaltyMembership]);
            }
            if (data.hasOwnProperty('lastActivity')) {
                obj['lastActivity'] = ApiClient.convertToType(data['lastActivity'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * The ID used for this entity in the application system.
 * @member {String} integrationId
 */
CustomerProfile.prototype['integrationId'] = undefined;

/**
 * The exact moment this entity was created.
 * @member {Date} created
 */
CustomerProfile.prototype['created'] = undefined;

/**
 * Arbitrary properties associated with this item
 * @member {Object} attributes
 */
CustomerProfile.prototype['attributes'] = undefined;

/**
 * The ID of the Talon.One account that owns this profile.
 * @member {Number} accountId
 */
CustomerProfile.prototype['accountId'] = undefined;

/**
 * The total amount of closed sessions by a customer. A closed session is a successful purchase.
 * @member {Number} closedSessions
 */
CustomerProfile.prototype['closedSessions'] = undefined;

/**
 * Sum of all purchases made by this customer
 * @member {Number} totalSales
 */
CustomerProfile.prototype['totalSales'] = undefined;

/**
 * A list of loyalty programs joined by the customer
 * @member {Array.<module:model/LoyaltyMembership>} loyaltyMemberships
 */
CustomerProfile.prototype['loyaltyMemberships'] = undefined;

/**
 * Timestamp of the most recent event received from this customer
 * @member {Date} lastActivity
 */
CustomerProfile.prototype['lastActivity'] = undefined;






export default CustomerProfile;

