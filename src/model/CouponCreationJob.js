/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeGeneratorSettings from './CodeGeneratorSettings';

/**
 * The CouponCreationJob model module.
 * @module model/CouponCreationJob
 * @version 4.4.0
 */
class CouponCreationJob {
    /**
     * Constructs a new <code>CouponCreationJob</code>.
     * 
     * @alias module:model/CouponCreationJob
     * @param id {Number} Unique ID for this entity.
     * @param created {Date} The exact moment this entity was created.
     * @param campaignId {Number} The ID of the campaign that owns this entity.
     * @param applicationId {Number} The ID of the application that owns this entity.
     * @param accountId {Number} The ID of the account that owns this entity.
     * @param usageLimit {Number} The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
     * @param numberOfCoupons {Number} The number of new coupon codes to generate for the campaign. Must be between 20,001 and 5,000,000.
     * @param attributes {Object} Arbitrary properties associated with coupons
     * @param batchId {String} The batch ID coupons created by this job will bear
     * @param status {String} The current status of this request. The value should be either 'pending', 'completed' or 'failed'
     * @param createdAmount {Number} The number of coupon codes that were already created for this request
     * @param failCount {Number} The number of times this job failed
     * @param errors {Array.<String>} An array of individual problems encountered during the request.
     * @param createdBy {Number} ID of the user who created this effect.
     * @param communicated {Boolean} Whether or not the user that created this job was notified of its final state
     * @param batchExecutionCount {Number} The number of times an attempt to create a batch of coupons was made during the processing of the job
     */
    constructor(id, created, campaignId, applicationId, accountId, usageLimit, numberOfCoupons, attributes, batchId, status, createdAmount, failCount, errors, createdBy, communicated, batchExecutionCount) { 
        
        CouponCreationJob.initialize(this, id, created, campaignId, applicationId, accountId, usageLimit, numberOfCoupons, attributes, batchId, status, createdAmount, failCount, errors, createdBy, communicated, batchExecutionCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, campaignId, applicationId, accountId, usageLimit, numberOfCoupons, attributes, batchId, status, createdAmount, failCount, errors, createdBy, communicated, batchExecutionCount) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['campaignId'] = campaignId;
        obj['applicationId'] = applicationId;
        obj['accountId'] = accountId;
        obj['usageLimit'] = usageLimit;
        obj['numberOfCoupons'] = numberOfCoupons;
        obj['attributes'] = attributes;
        obj['batchId'] = batchId;
        obj['status'] = status;
        obj['createdAmount'] = createdAmount;
        obj['failCount'] = failCount;
        obj['errors'] = errors;
        obj['createdBy'] = createdBy;
        obj['communicated'] = communicated;
        obj['batchExecutionCount'] = batchExecutionCount;
    }

    /**
     * Constructs a <code>CouponCreationJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CouponCreationJob} obj Optional instance to populate.
     * @return {module:model/CouponCreationJob} The populated <code>CouponCreationJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CouponCreationJob();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'Number');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('usageLimit')) {
                obj['usageLimit'] = ApiClient.convertToType(data['usageLimit'], 'Number');
            }
            if (data.hasOwnProperty('discountLimit')) {
                obj['discountLimit'] = ApiClient.convertToType(data['discountLimit'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('numberOfCoupons')) {
                obj['numberOfCoupons'] = ApiClient.convertToType(data['numberOfCoupons'], 'Number');
            }
            if (data.hasOwnProperty('couponSettings')) {
                obj['couponSettings'] = CodeGeneratorSettings.constructFromObject(data['couponSettings']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('batchId')) {
                obj['batchId'] = ApiClient.convertToType(data['batchId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('createdAmount')) {
                obj['createdAmount'] = ApiClient.convertToType(data['createdAmount'], 'Number');
            }
            if (data.hasOwnProperty('failCount')) {
                obj['failCount'] = ApiClient.convertToType(data['failCount'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'Number');
            }
            if (data.hasOwnProperty('communicated')) {
                obj['communicated'] = ApiClient.convertToType(data['communicated'], 'Boolean');
            }
            if (data.hasOwnProperty('batchExecutionCount')) {
                obj['batchExecutionCount'] = ApiClient.convertToType(data['batchExecutionCount'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Unique ID for this entity.
 * @member {Number} id
 */
CouponCreationJob.prototype['id'] = undefined;

/**
 * The exact moment this entity was created.
 * @member {Date} created
 */
CouponCreationJob.prototype['created'] = undefined;

/**
 * The ID of the campaign that owns this entity.
 * @member {Number} campaignId
 */
CouponCreationJob.prototype['campaignId'] = undefined;

/**
 * The ID of the application that owns this entity.
 * @member {Number} applicationId
 */
CouponCreationJob.prototype['applicationId'] = undefined;

/**
 * The ID of the account that owns this entity.
 * @member {Number} accountId
 */
CouponCreationJob.prototype['accountId'] = undefined;

/**
 * The number of times a coupon code can be redeemed. This can be set to 0 for no limit, but any campaign usage limits will still apply. 
 * @member {Number} usageLimit
 */
CouponCreationJob.prototype['usageLimit'] = undefined;

/**
 * The amount of discounts that can be given with this coupon code. 
 * @member {Number} discountLimit
 */
CouponCreationJob.prototype['discountLimit'] = undefined;

/**
 * Timestamp at which point the coupon becomes valid.
 * @member {Date} startDate
 */
CouponCreationJob.prototype['startDate'] = undefined;

/**
 * Expiry date of the coupon. Coupon never expires if this is omitted, zero, or negative.
 * @member {Date} expiryDate
 */
CouponCreationJob.prototype['expiryDate'] = undefined;

/**
 * The number of new coupon codes to generate for the campaign. Must be between 20,001 and 5,000,000.
 * @member {Number} numberOfCoupons
 */
CouponCreationJob.prototype['numberOfCoupons'] = undefined;

/**
 * @member {module:model/CodeGeneratorSettings} couponSettings
 */
CouponCreationJob.prototype['couponSettings'] = undefined;

/**
 * Arbitrary properties associated with coupons
 * @member {Object} attributes
 */
CouponCreationJob.prototype['attributes'] = undefined;

/**
 * The batch ID coupons created by this job will bear
 * @member {String} batchId
 */
CouponCreationJob.prototype['batchId'] = undefined;

/**
 * The current status of this request. The value should be either 'pending', 'completed' or 'failed'
 * @member {String} status
 */
CouponCreationJob.prototype['status'] = undefined;

/**
 * The number of coupon codes that were already created for this request
 * @member {Number} createdAmount
 */
CouponCreationJob.prototype['createdAmount'] = undefined;

/**
 * The number of times this job failed
 * @member {Number} failCount
 */
CouponCreationJob.prototype['failCount'] = undefined;

/**
 * An array of individual problems encountered during the request.
 * @member {Array.<String>} errors
 */
CouponCreationJob.prototype['errors'] = undefined;

/**
 * ID of the user who created this effect.
 * @member {Number} createdBy
 */
CouponCreationJob.prototype['createdBy'] = undefined;

/**
 * Whether or not the user that created this job was notified of its final state
 * @member {Boolean} communicated
 */
CouponCreationJob.prototype['communicated'] = undefined;

/**
 * The number of times an attempt to create a batch of coupons was made during the processing of the job
 * @member {Number} batchExecutionCount
 */
CouponCreationJob.prototype['batchExecutionCount'] = undefined;






export default CouponCreationJob;

