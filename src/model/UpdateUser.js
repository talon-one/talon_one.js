/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateUser model module.
 * @module model/UpdateUser
 * @version 5.0.0
 */
class UpdateUser {
    /**
     * Constructs a new <code>UpdateUser</code>.
     * @alias module:model/UpdateUser
     */
    constructor() { 
        
        UpdateUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateUser} obj Optional instance to populate.
     * @return {module:model/UpdateUser} The populated <code>UpdateUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateUser();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['Number']);
            }
            if (data.hasOwnProperty('applicationNotificationSubscriptions')) {
                obj['applicationNotificationSubscriptions'] = ApiClient.convertToType(data['applicationNotificationSubscriptions'], Object);
            }
        }
        return obj;
    }


}

/**
 * The user name.
 * @member {String} name
 */
UpdateUser.prototype['name'] = undefined;

/**
 * The `Access Control List` json defining the role of the user. This represents the access control on the user level.
 * @member {String} policy
 */
UpdateUser.prototype['policy'] = undefined;

/**
 * New state (\"deactivated\" or \"active\") for the user. Only usable by admins for the user.
 * @member {module:model/UpdateUser.StateEnum} state
 */
UpdateUser.prototype['state'] = undefined;

/**
 * List of roles to assign to the user.
 * @member {Array.<Number>} roles
 */
UpdateUser.prototype['roles'] = undefined;

/**
 * @member {Object} applicationNotificationSubscriptions
 */
UpdateUser.prototype['applicationNotificationSubscriptions'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
UpdateUser['StateEnum'] = {

    /**
     * value: "deactivated"
     * @const
     */
    "deactivated": "deactivated",

    /**
     * value: "active"
     * @const
     */
    "active": "active"
};



export default UpdateUser;

