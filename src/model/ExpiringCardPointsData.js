/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExpiringCardPointsData model module.
 * @module model/ExpiringCardPointsData
 * @version .0
 */
class ExpiringCardPointsData {
    /**
     * Constructs a new <code>ExpiringCardPointsData</code>.
     * @alias module:model/ExpiringCardPointsData
     * @param expiryDate {Date} The expiration date of loyalty points.
     * @param loyaltyProgramID {Number} The ID of the loyalty program.
     * @param amountOfExpiringPoints {Number} The amount of loyalty points that will be expired soon.
     * @param subledgerID {String} The ID of the subledger within the loyalty program where these points were added.
     * @param cardIdentifier {String} The alphanumeric identifier of the loyalty card.
     * @param usersPerCardLimit {Number} The maximum number of customer profiles with which a card can be shared. This can be set to `0` for no limit. 
     * @param profiles {Array.<String>} The integration IDs of the customer profiles linked to the card.
     */
    constructor(expiryDate, loyaltyProgramID, amountOfExpiringPoints, subledgerID, cardIdentifier, usersPerCardLimit, profiles) { 
        
        ExpiringCardPointsData.initialize(this, expiryDate, loyaltyProgramID, amountOfExpiringPoints, subledgerID, cardIdentifier, usersPerCardLimit, profiles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiryDate, loyaltyProgramID, amountOfExpiringPoints, subledgerID, cardIdentifier, usersPerCardLimit, profiles) { 
        obj['ExpiryDate'] = expiryDate;
        obj['LoyaltyProgramID'] = loyaltyProgramID;
        obj['AmountOfExpiringPoints'] = amountOfExpiringPoints;
        obj['SubledgerID'] = subledgerID;
        obj['CardIdentifier'] = cardIdentifier;
        obj['UsersPerCardLimit'] = usersPerCardLimit;
        obj['Profiles'] = profiles;
    }

    /**
     * Constructs a <code>ExpiringCardPointsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpiringCardPointsData} obj Optional instance to populate.
     * @return {module:model/ExpiringCardPointsData} The populated <code>ExpiringCardPointsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpiringCardPointsData();

            if (data.hasOwnProperty('ExpiryDate')) {
                obj['ExpiryDate'] = ApiClient.convertToType(data['ExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('LoyaltyProgramID')) {
                obj['LoyaltyProgramID'] = ApiClient.convertToType(data['LoyaltyProgramID'], 'Number');
            }
            if (data.hasOwnProperty('AmountOfExpiringPoints')) {
                obj['AmountOfExpiringPoints'] = ApiClient.convertToType(data['AmountOfExpiringPoints'], 'Number');
            }
            if (data.hasOwnProperty('SubledgerID')) {
                obj['SubledgerID'] = ApiClient.convertToType(data['SubledgerID'], 'String');
            }
            if (data.hasOwnProperty('CardIdentifier')) {
                obj['CardIdentifier'] = ApiClient.convertToType(data['CardIdentifier'], 'String');
            }
            if (data.hasOwnProperty('UsersPerCardLimit')) {
                obj['UsersPerCardLimit'] = ApiClient.convertToType(data['UsersPerCardLimit'], 'Number');
            }
            if (data.hasOwnProperty('Profiles')) {
                obj['Profiles'] = ApiClient.convertToType(data['Profiles'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * The expiration date of loyalty points.
 * @member {Date} ExpiryDate
 */
ExpiringCardPointsData.prototype['ExpiryDate'] = undefined;

/**
 * The ID of the loyalty program.
 * @member {Number} LoyaltyProgramID
 */
ExpiringCardPointsData.prototype['LoyaltyProgramID'] = undefined;

/**
 * The amount of loyalty points that will be expired soon.
 * @member {Number} AmountOfExpiringPoints
 */
ExpiringCardPointsData.prototype['AmountOfExpiringPoints'] = undefined;

/**
 * The ID of the subledger within the loyalty program where these points were added.
 * @member {String} SubledgerID
 */
ExpiringCardPointsData.prototype['SubledgerID'] = undefined;

/**
 * The alphanumeric identifier of the loyalty card.
 * @member {String} CardIdentifier
 */
ExpiringCardPointsData.prototype['CardIdentifier'] = undefined;

/**
 * The maximum number of customer profiles with which a card can be shared. This can be set to `0` for no limit. 
 * @member {Number} UsersPerCardLimit
 */
ExpiringCardPointsData.prototype['UsersPerCardLimit'] = undefined;

/**
 * The integration IDs of the customer profiles linked to the card.
 * @member {Array.<String>} Profiles
 */
ExpiringCardPointsData.prototype['Profiles'] = undefined;






export default ExpiringCardPointsData;

