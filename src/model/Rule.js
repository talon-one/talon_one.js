/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Binding from './Binding';

/**
 * The Rule model module.
 * @module model/Rule
 * @version 4.5.0
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * @alias module:model/Rule
     * @param title {String} A short description of the rule.
     * @param condition {Array.<Object>} A Talang expression that will be evaluated in the context of the given event.
     * @param effects {Array.<Object>} An array of effectful Talang expressions in arrays that will be evaluated when a rule matches.
     */
    constructor(title, condition, effects) { 
        
        Rule.initialize(this, title, condition, effects);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, condition, effects) { 
        obj['title'] = title;
        obj['condition'] = condition;
        obj['effects'] = effects;
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('bindings')) {
                obj['bindings'] = ApiClient.convertToType(data['bindings'], [Binding]);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], [Object]);
            }
            if (data.hasOwnProperty('effects')) {
                obj['effects'] = ApiClient.convertToType(data['effects'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * A short description of the rule.
 * @member {String} title
 */
Rule.prototype['title'] = undefined;

/**
 * A longer, more detailed description of the rule.
 * @member {String} description
 */
Rule.prototype['description'] = undefined;

/**
 * An array that provides objects with variable names (name) and talang expressions to whose result they are bound (expression) during rule evaluation. The order of the evaluation is decided by the position in the array.
 * @member {Array.<module:model/Binding>} bindings
 */
Rule.prototype['bindings'] = undefined;

/**
 * A Talang expression that will be evaluated in the context of the given event.
 * @member {Array.<Object>} condition
 */
Rule.prototype['condition'] = undefined;

/**
 * An array of effectful Talang expressions in arrays that will be evaluated when a rule matches.
 * @member {Array.<Object>} effects
 */
Rule.prototype['effects'] = undefined;






export default Rule;

