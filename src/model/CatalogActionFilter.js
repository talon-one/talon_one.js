/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CatalogActionFilter model module.
 * @module model/CatalogActionFilter
 * @version 5.0.1
 */
class CatalogActionFilter {
    /**
     * Constructs a new <code>CatalogActionFilter</code>.
     * The properties for a single filtering condition in a catalog sync action.
     * @alias module:model/CatalogActionFilter
     * @param attr {String} The name of the attribute to filter on.
     * @param op {module:model/CatalogActionFilter.OpEnum} The filtering operator.
     * @param value {Object} The value to filter for.
     */
    constructor(attr, op, value) { 
        
        CatalogActionFilter.initialize(this, attr, op, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attr, op, value) { 
        obj['attr'] = attr;
        obj['op'] = op;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>CatalogActionFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogActionFilter} obj Optional instance to populate.
     * @return {module:model/CatalogActionFilter} The populated <code>CatalogActionFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogActionFilter();

            if (data.hasOwnProperty('attr')) {
                obj['attr'] = ApiClient.convertToType(data['attr'], 'String');
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }


}

/**
 * The name of the attribute to filter on.
 * @member {String} attr
 */
CatalogActionFilter.prototype['attr'] = undefined;

/**
 * The filtering operator.
 * @member {module:model/CatalogActionFilter.OpEnum} op
 */
CatalogActionFilter.prototype['op'] = undefined;

/**
 * The value to filter for.
 * @member {Object} value
 */
CatalogActionFilter.prototype['value'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
CatalogActionFilter['OpEnum'] = {

    /**
     * value: "EQ"
     * @const
     */
    "EQ": "EQ",

    /**
     * value: "LT"
     * @const
     */
    "LT": "LT",

    /**
     * value: "LE"
     * @const
     */
    "LE": "LE",

    /**
     * value: "GT"
     * @const
     */
    "GT": "GT",

    /**
     * value: "GE"
     * @const
     */
    "GE": "GE",

    /**
     * value: "IN"
     * @const
     */
    "IN": "IN"
};



export default CatalogActionFilter;

