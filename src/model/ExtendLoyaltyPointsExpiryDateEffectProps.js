/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExtendLoyaltyPointsExpiryDateEffectProps model module.
 * @module model/ExtendLoyaltyPointsExpiryDateEffectProps
 * @version .0
 */
class ExtendLoyaltyPointsExpiryDateEffectProps {
    /**
     * Constructs a new <code>ExtendLoyaltyPointsExpiryDateEffectProps</code>.
     * The properties specific to the \&quot;extendLoyaltyPointsExpiryDate\&quot; effect. This gets triggered when a validated rule contains the \&quot;extend expiry date\&quot; effect. The current expiry date gets extended by the time frame given in the effect. 
     * @alias module:model/ExtendLoyaltyPointsExpiryDateEffectProps
     * @param programId {Number} ID of the loyalty program that contains these points.
     * @param subLedgerId {String} API name of the loyalty program subledger that contains these points. added.
     * @param extensionDuration {String} Time frame by which the expiry date extends.  The time format is either: - immediate, or - an **integer** followed by a letter indicating the time unit.  Examples: `immediate`, `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. 
     * @param previousExpirationDate {Date} Expiry date before applying the extension.
     */
    constructor(programId, subLedgerId, extensionDuration, previousExpirationDate) { 
        
        ExtendLoyaltyPointsExpiryDateEffectProps.initialize(this, programId, subLedgerId, extensionDuration, previousExpirationDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, programId, subLedgerId, extensionDuration, previousExpirationDate) { 
        obj['programId'] = programId;
        obj['subLedgerId'] = subLedgerId;
        obj['extensionDuration'] = extensionDuration;
        obj['previousExpirationDate'] = previousExpirationDate;
    }

    /**
     * Constructs a <code>ExtendLoyaltyPointsExpiryDateEffectProps</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendLoyaltyPointsExpiryDateEffectProps} obj Optional instance to populate.
     * @return {module:model/ExtendLoyaltyPointsExpiryDateEffectProps} The populated <code>ExtendLoyaltyPointsExpiryDateEffectProps</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendLoyaltyPointsExpiryDateEffectProps();

            if (data.hasOwnProperty('programId')) {
                obj['programId'] = ApiClient.convertToType(data['programId'], 'Number');
            }
            if (data.hasOwnProperty('subLedgerId')) {
                obj['subLedgerId'] = ApiClient.convertToType(data['subLedgerId'], 'String');
            }
            if (data.hasOwnProperty('extensionDuration')) {
                obj['extensionDuration'] = ApiClient.convertToType(data['extensionDuration'], 'String');
            }
            if (data.hasOwnProperty('transactionUUIDs')) {
                obj['transactionUUIDs'] = ApiClient.convertToType(data['transactionUUIDs'], ['String']);
            }
            if (data.hasOwnProperty('previousExpirationDate')) {
                obj['previousExpirationDate'] = ApiClient.convertToType(data['previousExpirationDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * ID of the loyalty program that contains these points.
 * @member {Number} programId
 */
ExtendLoyaltyPointsExpiryDateEffectProps.prototype['programId'] = undefined;

/**
 * API name of the loyalty program subledger that contains these points. added.
 * @member {String} subLedgerId
 */
ExtendLoyaltyPointsExpiryDateEffectProps.prototype['subLedgerId'] = undefined;

/**
 * Time frame by which the expiry date extends.  The time format is either: - immediate, or - an **integer** followed by a letter indicating the time unit.  Examples: `immediate`, `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year. 
 * @member {String} extensionDuration
 */
ExtendLoyaltyPointsExpiryDateEffectProps.prototype['extensionDuration'] = undefined;

/**
 * The list of identifiers of transactions affected affected by the extension.
 * @member {Array.<String>} transactionUUIDs
 */
ExtendLoyaltyPointsExpiryDateEffectProps.prototype['transactionUUIDs'] = undefined;

/**
 * Expiry date before applying the extension.
 * @member {Date} previousExpirationDate
 */
ExtendLoyaltyPointsExpiryDateEffectProps.prototype['previousExpirationDate'] = undefined;






export default ExtendLoyaltyPointsExpiryDateEffectProps;

