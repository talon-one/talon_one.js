/**
 * Talon.One API
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributesSettings from './AttributesSettings';
import LimitConfig from './LimitConfig';
import LoyaltyProgram from './LoyaltyProgram';

/**
 * The Application model module.
 * @module model/Application
 * @version 4.1.1
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * 
     * @alias module:model/Application
     * @param id {Number} Unique ID for this entity.
     * @param created {Date} The exact moment this entity was created.
     * @param modified {Date} The exact moment this entity was last modified.
     * @param accountId {Number} The ID of the account that owns this entity.
     * @param name {String} The name of this application.
     * @param timezone {String} A string containing an IANA timezone descriptor.
     * @param currency {String} A string describing a default currency for new customer sessions.
     * @param loyaltyPrograms {Array.<module:model/LoyaltyProgram>} An array containing all the loyalty programs to which this application is subscribed
     */
    constructor(id, created, modified, accountId, name, timezone, currency, loyaltyPrograms) { 
        
        Application.initialize(this, id, created, modified, accountId, name, timezone, currency, loyaltyPrograms);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, modified, accountId, name, timezone, currency, loyaltyPrograms) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['modified'] = modified;
        obj['accountId'] = accountId;
        obj['name'] = name;
        obj['timezone'] = timezone;
        obj['currency'] = currency;
        obj['loyaltyPrograms'] = loyaltyPrograms;
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('caseSensitivity')) {
                obj['caseSensitivity'] = ApiClient.convertToType(data['caseSensitivity'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('limits')) {
                obj['limits'] = ApiClient.convertToType(data['limits'], [LimitConfig]);
            }
            if (data.hasOwnProperty('campaignPriority')) {
                obj['campaignPriority'] = ApiClient.convertToType(data['campaignPriority'], 'String');
            }
            if (data.hasOwnProperty('attributesSettings')) {
                obj['attributesSettings'] = AttributesSettings.constructFromObject(data['attributesSettings']);
            }
            if (data.hasOwnProperty('loyaltyPrograms')) {
                obj['loyaltyPrograms'] = ApiClient.convertToType(data['loyaltyPrograms'], [LoyaltyProgram]);
            }
        }
        return obj;
    }


}

/**
 * Unique ID for this entity.
 * @member {Number} id
 */
Application.prototype['id'] = undefined;

/**
 * The exact moment this entity was created.
 * @member {Date} created
 */
Application.prototype['created'] = undefined;

/**
 * The exact moment this entity was last modified.
 * @member {Date} modified
 */
Application.prototype['modified'] = undefined;

/**
 * The ID of the account that owns this entity.
 * @member {Number} accountId
 */
Application.prototype['accountId'] = undefined;

/**
 * The name of this application.
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * A longer description of the application.
 * @member {String} description
 */
Application.prototype['description'] = undefined;

/**
 * A string containing an IANA timezone descriptor.
 * @member {String} timezone
 */
Application.prototype['timezone'] = undefined;

/**
 * A string describing a default currency for new customer sessions.
 * @member {String} currency
 */
Application.prototype['currency'] = undefined;

/**
 * A string indicating how should campaigns in this application deal with case sensitivity on coupon codes.
 * @member {module:model/Application.CaseSensitivityEnum} caseSensitivity
 */
Application.prototype['caseSensitivity'] = undefined;

/**
 * Arbitrary properties associated with this campaign
 * @member {Object} attributes
 */
Application.prototype['attributes'] = undefined;

/**
 * Default limits for campaigns created in this application
 * @member {Array.<module:model/LimitConfig>} limits
 */
Application.prototype['limits'] = undefined;

/**
 * Default priority for campaigns created in this application, can be one of (universal, stackable, exclusive)
 * @member {module:model/Application.CampaignPriorityEnum} campaignPriority
 */
Application.prototype['campaignPriority'] = undefined;

/**
 * @member {module:model/AttributesSettings} attributesSettings
 */
Application.prototype['attributesSettings'] = undefined;

/**
 * An array containing all the loyalty programs to which this application is subscribed
 * @member {Array.<module:model/LoyaltyProgram>} loyaltyPrograms
 */
Application.prototype['loyaltyPrograms'] = undefined;





/**
 * Allowed values for the <code>caseSensitivity</code> property.
 * @enum {String}
 * @readonly
 */
Application['CaseSensitivityEnum'] = {

    /**
     * value: "sensitive"
     * @const
     */
    "sensitive": "sensitive",

    /**
     * value: "insensitive-uppercase"
     * @const
     */
    "insensitive-uppercase": "insensitive-uppercase",

    /**
     * value: "insensitive-lowercase"
     * @const
     */
    "insensitive-lowercase": "insensitive-lowercase"
};


/**
 * Allowed values for the <code>campaignPriority</code> property.
 * @enum {String}
 * @readonly
 */
Application['CampaignPriorityEnum'] = {

    /**
     * value: "universal"
     * @const
     */
    "universal": "universal",

    /**
     * value: "stackable"
     * @const
     */
    "stackable": "stackable",

    /**
     * value: "exclusive"
     * @const
     */
    "exclusive": "exclusive"
};



export default Application;

