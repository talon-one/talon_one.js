/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Store model module.
 * @module model/Store
 * @version .0
 */
class Store {
    /**
     * Constructs a new <code>Store</code>.
     * @alias module:model/Store
     * @param id {Number} The internal ID of this entity.
     * @param created {Date} The time this entity was created.
     * @param name {String} The name of the store.
     * @param description {String} The description of the store.
     * @param integrationId {String} The integration ID of the store. You choose this ID when you create a store.  **Note**: You cannot edit the `integrationId` after the store has been created. 
     * @param applicationId {Number} The ID of the Application that owns this entity.
     * @param updated {Date} Timestamp of the most recent update on this entity.
     */
    constructor(id, created, name, description, integrationId, applicationId, updated) { 
        
        Store.initialize(this, id, created, name, description, integrationId, applicationId, updated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, created, name, description, integrationId, applicationId, updated) { 
        obj['id'] = id;
        obj['created'] = created;
        obj['name'] = name;
        obj['description'] = description;
        obj['integrationId'] = integrationId;
        obj['applicationId'] = applicationId;
        obj['updated'] = updated;
    }

    /**
     * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Store} obj Optional instance to populate.
     * @return {module:model/Store} The populated <code>Store</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Store();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('integrationId')) {
                obj['integrationId'] = ApiClient.convertToType(data['integrationId'], 'String');
            }
            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'Number');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'Date');
            }
            if (data.hasOwnProperty('linkedCampaignIds')) {
                obj['linkedCampaignIds'] = ApiClient.convertToType(data['linkedCampaignIds'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * The internal ID of this entity.
 * @member {Number} id
 */
Store.prototype['id'] = undefined;

/**
 * The time this entity was created.
 * @member {Date} created
 */
Store.prototype['created'] = undefined;

/**
 * The name of the store.
 * @member {String} name
 */
Store.prototype['name'] = undefined;

/**
 * The description of the store.
 * @member {String} description
 */
Store.prototype['description'] = undefined;

/**
 * The attributes of the store.
 * @member {Object} attributes
 */
Store.prototype['attributes'] = undefined;

/**
 * The integration ID of the store. You choose this ID when you create a store.  **Note**: You cannot edit the `integrationId` after the store has been created. 
 * @member {String} integrationId
 */
Store.prototype['integrationId'] = undefined;

/**
 * The ID of the Application that owns this entity.
 * @member {Number} applicationId
 */
Store.prototype['applicationId'] = undefined;

/**
 * Timestamp of the most recent update on this entity.
 * @member {Date} updated
 */
Store.prototype['updated'] = undefined;

/**
 * A list of IDs of the campaigns that are linked with current store.
 * @member {Array.<Number>} linkedCampaignIds
 */
Store.prototype['linkedCampaignIds'] = undefined;






export default Store;

