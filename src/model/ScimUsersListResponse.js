/**
 * Talon.One API
 * Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScimUser from './ScimUser';

/**
 * The ScimUsersListResponse model module.
 * @module model/ScimUsersListResponse
 * @version 25.15.0
 */
class ScimUsersListResponse {
    /**
     * Constructs a new <code>ScimUsersListResponse</code>.
     * List of users that have been provisioned using the SCIM protocol with an identity provider, for example, Microsoft Entra ID.
     * @alias module:model/ScimUsersListResponse
     * @param resources {Array.<module:model/ScimUser>} 
     */
    constructor(resources) { 
        
        ScimUsersListResponse.initialize(this, resources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resources) { 
        obj['Resources'] = resources;
    }

    /**
     * Constructs a <code>ScimUsersListResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScimUsersListResponse} obj Optional instance to populate.
     * @return {module:model/ScimUsersListResponse} The populated <code>ScimUsersListResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScimUsersListResponse();

            if (data.hasOwnProperty('Resources')) {
                obj['Resources'] = ApiClient.convertToType(data['Resources'], [ScimUser]);
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], ['String']);
            }
            if (data.hasOwnProperty('totalResults')) {
                obj['totalResults'] = ApiClient.convertToType(data['totalResults'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/ScimUser>} Resources
 */
ScimUsersListResponse.prototype['Resources'] = undefined;

/**
 * SCIM schema for the given resource.
 * @member {Array.<String>} schemas
 */
ScimUsersListResponse.prototype['schemas'] = undefined;

/**
 * Number of total results in the response.
 * @member {Number} totalResults
 */
ScimUsersListResponse.prototype['totalResults'] = undefined;






export default ScimUsersListResponse;

